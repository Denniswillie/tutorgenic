{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\noogler\\\\Documents\\\\tutorgenic\\\\dev\\\\client\\\\src\\\\components\\\\Room.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport io from \"socket.io-client\";\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ApplyTutor(props) {\n  _s();\n\n  const {\n    setDisplayNavbar,\n    setUser,\n    courseId\n  } = props;\n  const [remoteStreams, setRemoteStreams] = useState([]);\n  setDisplayNavbar(true);\n  useEffect(() => {\n    const ac = new AbortController();\n    axios.get('/auth/isLoggedIn').then(res => res.data).catch(err => console.log(err)).then(async res => {\n      if (res.isLoggedIn) {\n        const user = res.user;\n        setUser(user);\n        const configuration = {\n          iceServers: [{\n            urls: ['stun:stun1.l.google.com:19302', 'stun:stun2.l.google.com:19302']\n          }],\n          iceCandidatePoolSize: 10\n        };\n        const localStream = await navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: true\n        });\n        document.querySelector('#localVideo').srcObject = localStream;\n        const socket = io.connect(\"http://localhost:5000\", {\n          query: 'session_id=' + Cookies.get('connect.sid').replace('s:', '').split('.')[0]\n        });\n        socket.emit('courseId', courseId);\n        socket.on('newclient', async newClientId => {\n          const peerConnection = new RTCPeerConnection(configuration);\n          localStream.getTracks().forEach(track => {\n            peerConnection.addTrack(track, localStream);\n          });\n\n          if (newClientId !== res.user._id) {\n            // as caller\n            socket.emit('callerPing', {\n              from: user._id,\n              destination: newClientId\n            });\n            socket.on('calleePing', async msg => {\n              if (msg.destination == user._id && msg.from === newClientId) {\n                const remoteStream = new MediaStream();\n                setRemoteStreams(prevData => {\n                  return [...prevData, remoteStream];\n                });\n                peerConnection.addEventListener('track', event => {\n                  event.streams[0].getTracks().forEach(track => {\n                    remoteStream.addTrack(track);\n                  });\n                });\n                peerConnection.addEventListener('icecandidate', event => {\n                  if (!event.candidate) {\n                    return;\n                  }\n\n                  socket.emit('callerCandidates', {\n                    from: user._id,\n                    destination: newClientId,\n                    content: event.candidate.toJSON()\n                  });\n                });\n                const offer = await peerConnection.createOffer();\n                await peerConnection.setLocalDescription(offer);\n                const roomWithOffer = {\n                  type: offer.type,\n                  sdp: offer.sdp\n                };\n                socket.emit('offer', {\n                  from: user._id,\n                  destination: newClientId,\n                  content: roomWithOffer\n                });\n                socket.on('answer', async answer => {\n                  const {\n                    from,\n                    destination,\n                    content\n                  } = answer;\n\n                  if (from === newClientId && destination === user._id) {\n                    const rtcSessionDescription = new RTCSessionDescription(content);\n                    await peerConnection.setRemoteDescription(rtcSessionDescription);\n                  }\n                });\n                socket.on('calleeCandidates', async icecandidate => {\n                  const {\n                    from,\n                    content\n                  } = icecandidate;\n\n                  if (from === newClientId) {\n                    await peerConnection.addIceCandidate(new RTCIceCandidate(content));\n                  }\n                });\n              }\n            });\n          } else {\n            socket.on('callerPing', msg => {\n              if (msg.destination === user._id) {\n                const callerId = msg.from;\n                socket.emit('calleePing', {\n                  from: user._id,\n                  destination: callerId\n                });\n                const remoteStream = new MediaStream();\n                setRemoteStreams(prevData => {\n                  return [...prevData, remoteStream];\n                });\n                peerConnection.addEventListener('track', event => {\n                  event.streams[0].getTracks().forEach(track => {\n                    remoteStream.addTrack(track);\n                  });\n                });\n                peerConnection.addEventListener('icecandidate', event => {\n                  if (!event.candidate) {\n                    return;\n                  }\n\n                  socket.emit('calleeCandidates', {\n                    from: user._id,\n                    destination: callerId,\n                    content: event.candidate.toJSON()\n                  });\n                });\n                socket.on('offer', async offer => {\n                  const {\n                    from,\n                    destination,\n                    content\n                  } = offer;\n\n                  if (from === callerId && destination === user._id) {\n                    await peerConnection.setRemoteDescription(new RTCSessionDescription(content));\n                    const answer = await peerConnection.createAnswer();\n                    await peerConnection.setLocalDescription(answer);\n                    const roomWithAnswer = {\n                      type: answer.type,\n                      sdp: answer.sdp\n                    };\n                    socket.emit('answer', {\n                      from: user._id,\n                      destination: callerId,\n                      content: roomWithAnswer\n                    });\n                  }\n                });\n                socket.on('callerCandidates', async icecandidate => {\n                  const {\n                    from,\n                    destination,\n                    content\n                  } = icecandidate;\n\n                  if (from === callerId && destination === user._id) {\n                    await peerConnection.addIceCandidate(new RTCIceCandidate(content));\n                  }\n                });\n              }\n            });\n          }\n        });\n      } else {\n        window.open('/', '_self');\n      }\n    });\n    return () => {\n      ac.abort();\n    };\n  }, [setUser]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      style: {\n        flex: \"0.75\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      style: {\n        flex: \"0.25\",\n        overflow: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        id: \"localVideo\",\n        muted: true,\n        autoPlay: true,\n        playsInLine: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 71\n      }, this), remoteStreams.map(remoteStream => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: video => {\n              video.srcObject = remoteStream;\n            },\n            autoPlay: true,\n            playsInLine: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 106\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 24\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 12\n  }, this);\n}\n\n_s(ApplyTutor, \"Y+hc+k0Q47+TPtX6qhT8yH7UbdU=\");\n\n_c = ApplyTutor;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApplyTutor\");","map":{"version":3,"sources":["C:/Users/noogler/Documents/tutorgenic/dev/client/src/components/Room.js"],"names":["axios","useEffect","useState","io","Cookies","ApplyTutor","props","setDisplayNavbar","setUser","courseId","remoteStreams","setRemoteStreams","ac","AbortController","get","then","res","data","catch","err","console","log","isLoggedIn","user","configuration","iceServers","urls","iceCandidatePoolSize","localStream","navigator","mediaDevices","getUserMedia","video","audio","document","querySelector","srcObject","socket","connect","query","replace","split","emit","on","newClientId","peerConnection","RTCPeerConnection","getTracks","forEach","track","addTrack","_id","from","destination","msg","remoteStream","MediaStream","prevData","addEventListener","event","streams","candidate","content","toJSON","offer","createOffer","setLocalDescription","roomWithOffer","type","sdp","answer","rtcSessionDescription","RTCSessionDescription","setRemoteDescription","icecandidate","addIceCandidate","RTCIceCandidate","callerId","createAnswer","roomWithAnswer","window","open","abort","flex","overflow","map"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACtC,QAAM;AAACC,IAAAA,gBAAD;AAAmBC,IAAAA,OAAnB;AAA4BC,IAAAA;AAA5B,MAAwCH,KAA9C;AACA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,EAAD,CAAlD;AAEAK,EAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,EAAE,GAAG,IAAIC,eAAJ,EAAX;AACAb,IAAAA,KAAK,CAACc,GAAN,CAAU,kBAAV,EACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IADrB,EAEKC,KAFL,CAEWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFlB,EAGKJ,IAHL,CAGU,MAAOC,GAAP,IAAe;AACjB,UAAIA,GAAG,CAACM,UAAR,EAAoB;AAChB,cAAMC,IAAI,GAAGP,GAAG,CAACO,IAAjB;AACAf,QAAAA,OAAO,CAACe,IAAD,CAAP;AACA,cAAMC,aAAa,GAAG;AAClBC,UAAAA,UAAU,EAAE,CACR;AACIC,YAAAA,IAAI,EAAE,CACN,+BADM,EAEN,+BAFM;AADV,WADQ,CADM;AASdC,UAAAA,oBAAoB,EAAE;AATR,SAAtB;AAWA,cAAMC,WAAW,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAC1DC,UAAAA,KAAK,EAAE,IADmD;AAE1DC,UAAAA,KAAK,EAAE;AAFmD,SAApC,CAA1B;AAIAC,QAAAA,QAAQ,CAACC,aAAT,CAAuB,aAAvB,EAAsCC,SAAtC,GAAkDR,WAAlD;AACA,cAAMS,MAAM,GAAGlC,EAAE,CAACmC,OAAH,CAAW,uBAAX,EAAoC;AAC/CC,UAAAA,KAAK,EAAE,gBAAgBnC,OAAO,CAACU,GAAR,CAAY,aAAZ,EAA2B0B,OAA3B,CAAmC,IAAnC,EAAwC,EAAxC,EAA4CC,KAA5C,CAAkD,GAAlD,EAAuD,CAAvD;AADwB,SAApC,CAAf;AAIAJ,QAAAA,MAAM,CAACK,IAAP,CAAY,UAAZ,EAAwBjC,QAAxB;AAEA4B,QAAAA,MAAM,CAACM,EAAP,CAAU,WAAV,EAAuB,MAAOC,WAAP,IAAuB;AAC1C,gBAAMC,cAAc,GAAG,IAAIC,iBAAJ,CAAsBtB,aAAtB,CAAvB;AACAI,UAAAA,WAAW,CAACmB,SAAZ,GAAwBC,OAAxB,CAAgCC,KAAK,IAAI;AACrCJ,YAAAA,cAAc,CAACK,QAAf,CAAwBD,KAAxB,EAA+BrB,WAA/B;AACH,WAFD;;AAGA,cAAIgB,WAAW,KAAK5B,GAAG,CAACO,IAAJ,CAAS4B,GAA7B,EAAkC;AAC9B;AACAd,YAAAA,MAAM,CAACK,IAAP,CAAY,YAAZ,EAA0B;AACtBU,cAAAA,IAAI,EAAE7B,IAAI,CAAC4B,GADW;AAEtBE,cAAAA,WAAW,EAAET;AAFS,aAA1B;AAKAP,YAAAA,MAAM,CAACM,EAAP,CAAU,YAAV,EAAwB,MAAOW,GAAP,IAAe;AACnC,kBAAIA,GAAG,CAACD,WAAJ,IAAmB9B,IAAI,CAAC4B,GAAxB,IAA+BG,GAAG,CAACF,IAAJ,KAAaR,WAAhD,EAA6D;AACzD,sBAAMW,YAAY,GAAG,IAAIC,WAAJ,EAArB;AACA7C,gBAAAA,gBAAgB,CAAC8C,QAAQ,IAAI;AACzB,yBAAO,CAAC,GAAGA,QAAJ,EAAcF,YAAd,CAAP;AACH,iBAFe,CAAhB;AAGAV,gBAAAA,cAAc,CAACa,gBAAf,CAAgC,OAAhC,EAAyCC,KAAK,IAAI;AAC9CA,kBAAAA,KAAK,CAACC,OAAN,CAAc,CAAd,EAAiBb,SAAjB,GAA6BC,OAA7B,CAAqCC,KAAK,IAAI;AAC1CM,oBAAAA,YAAY,CAACL,QAAb,CAAsBD,KAAtB;AACH,mBAFD;AAGH,iBAJD;AAMAJ,gBAAAA,cAAc,CAACa,gBAAf,CAAgC,cAAhC,EAAgDC,KAAK,IAAI;AACrD,sBAAI,CAACA,KAAK,CAACE,SAAX,EAAsB;AAClB;AACH;;AACDxB,kBAAAA,MAAM,CAACK,IAAP,CAAY,kBAAZ,EAAgC;AAC5BU,oBAAAA,IAAI,EAAE7B,IAAI,CAAC4B,GADiB;AAE5BE,oBAAAA,WAAW,EAAET,WAFe;AAG5BkB,oBAAAA,OAAO,EAAEH,KAAK,CAACE,SAAN,CAAgBE,MAAhB;AAHmB,mBAAhC;AAKH,iBATD;AAWA,sBAAMC,KAAK,GAAG,MAAMnB,cAAc,CAACoB,WAAf,EAApB;AACA,sBAAMpB,cAAc,CAACqB,mBAAf,CAAmCF,KAAnC,CAAN;AACA,sBAAMG,aAAa,GAAG;AAClBC,kBAAAA,IAAI,EAAEJ,KAAK,CAACI,IADM;AAElBC,kBAAAA,GAAG,EAAEL,KAAK,CAACK;AAFO,iBAAtB;AAIAhC,gBAAAA,MAAM,CAACK,IAAP,CAAY,OAAZ,EAAqB;AACjBU,kBAAAA,IAAI,EAAE7B,IAAI,CAAC4B,GADM;AAEjBE,kBAAAA,WAAW,EAAET,WAFI;AAGjBkB,kBAAAA,OAAO,EAAEK;AAHQ,iBAArB;AAMA9B,gBAAAA,MAAM,CAACM,EAAP,CAAU,QAAV,EAAoB,MAAO2B,MAAP,IAAkB;AAClC,wBAAM;AAAClB,oBAAAA,IAAD;AAAOC,oBAAAA,WAAP;AAAoBS,oBAAAA;AAApB,sBAA+BQ,MAArC;;AACA,sBAAIlB,IAAI,KAAKR,WAAT,IAAwBS,WAAW,KAAK9B,IAAI,CAAC4B,GAAjD,EAAsD;AAClD,0BAAMoB,qBAAqB,GAAG,IAAIC,qBAAJ,CAA0BV,OAA1B,CAA9B;AACA,0BAAMjB,cAAc,CAAC4B,oBAAf,CAAoCF,qBAApC,CAAN;AACH;AACJ,iBAND;AAQAlC,gBAAAA,MAAM,CAACM,EAAP,CAAU,kBAAV,EAA8B,MAAO+B,YAAP,IAAwB;AAClD,wBAAM;AAACtB,oBAAAA,IAAD;AAAOU,oBAAAA;AAAP,sBAAkBY,YAAxB;;AACA,sBAAItB,IAAI,KAAKR,WAAb,EAA0B;AACtB,0BAAMC,cAAc,CAAC8B,eAAf,CAA+B,IAAIC,eAAJ,CAAoBd,OAApB,CAA/B,CAAN;AACH;AACJ,iBALD;AAMH;AACJ,aAlDD;AAmDH,WA1DD,MA0DO;AACHzB,YAAAA,MAAM,CAACM,EAAP,CAAU,YAAV,EAAwBW,GAAG,IAAI;AAC3B,kBAAIA,GAAG,CAACD,WAAJ,KAAoB9B,IAAI,CAAC4B,GAA7B,EAAkC;AAC9B,sBAAM0B,QAAQ,GAAGvB,GAAG,CAACF,IAArB;AACAf,gBAAAA,MAAM,CAACK,IAAP,CAAY,YAAZ,EAA0B;AACtBU,kBAAAA,IAAI,EAAE7B,IAAI,CAAC4B,GADW;AAEtBE,kBAAAA,WAAW,EAAEwB;AAFS,iBAA1B;AAKA,sBAAMtB,YAAY,GAAG,IAAIC,WAAJ,EAArB;AACA7C,gBAAAA,gBAAgB,CAAC8C,QAAQ,IAAI;AACzB,yBAAO,CAAC,GAAGA,QAAJ,EAAcF,YAAd,CAAP;AACH,iBAFe,CAAhB;AAGAV,gBAAAA,cAAc,CAACa,gBAAf,CAAgC,OAAhC,EAAyCC,KAAK,IAAI;AAC9CA,kBAAAA,KAAK,CAACC,OAAN,CAAc,CAAd,EAAiBb,SAAjB,GAA6BC,OAA7B,CAAqCC,KAAK,IAAI;AAC1CM,oBAAAA,YAAY,CAACL,QAAb,CAAsBD,KAAtB;AACH,mBAFD;AAGH,iBAJD;AAMAJ,gBAAAA,cAAc,CAACa,gBAAf,CAAgC,cAAhC,EAAgDC,KAAK,IAAI;AACrD,sBAAI,CAACA,KAAK,CAACE,SAAX,EAAsB;AAClB;AACH;;AACDxB,kBAAAA,MAAM,CAACK,IAAP,CAAY,kBAAZ,EAAgC;AAC5BU,oBAAAA,IAAI,EAAE7B,IAAI,CAAC4B,GADiB;AAE5BE,oBAAAA,WAAW,EAAEwB,QAFe;AAG5Bf,oBAAAA,OAAO,EAAEH,KAAK,CAACE,SAAN,CAAgBE,MAAhB;AAHmB,mBAAhC;AAKH,iBATD;AAWA1B,gBAAAA,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmB,MAAOqB,KAAP,IAAiB;AAChC,wBAAM;AAACZ,oBAAAA,IAAD;AAAOC,oBAAAA,WAAP;AAAoBS,oBAAAA;AAApB,sBAA+BE,KAArC;;AACA,sBAAIZ,IAAI,KAAKyB,QAAT,IAAqBxB,WAAW,KAAK9B,IAAI,CAAC4B,GAA9C,EAAmD;AAC/C,0BAAMN,cAAc,CAAC4B,oBAAf,CAAoC,IAAID,qBAAJ,CAA0BV,OAA1B,CAApC,CAAN;AACA,0BAAMQ,MAAM,GAAG,MAAMzB,cAAc,CAACiC,YAAf,EAArB;AACA,0BAAMjC,cAAc,CAACqB,mBAAf,CAAmCI,MAAnC,CAAN;AAEA,0BAAMS,cAAc,GAAG;AACnBX,sBAAAA,IAAI,EAAEE,MAAM,CAACF,IADM;AAEnBC,sBAAAA,GAAG,EAAEC,MAAM,CAACD;AAFO,qBAAvB;AAKAhC,oBAAAA,MAAM,CAACK,IAAP,CAAY,QAAZ,EAAsB;AAClBU,sBAAAA,IAAI,EAAE7B,IAAI,CAAC4B,GADO;AAElBE,sBAAAA,WAAW,EAAEwB,QAFK;AAGlBf,sBAAAA,OAAO,EAAEiB;AAHS,qBAAtB;AAKH;AACJ,iBAlBD;AAoBA1C,gBAAAA,MAAM,CAACM,EAAP,CAAU,kBAAV,EAA8B,MAAO+B,YAAP,IAAwB;AAClD,wBAAM;AAACtB,oBAAAA,IAAD;AAAOC,oBAAAA,WAAP;AAAoBS,oBAAAA;AAApB,sBAA+BY,YAArC;;AACA,sBAAItB,IAAI,KAAKyB,QAAT,IAAqBxB,WAAW,KAAK9B,IAAI,CAAC4B,GAA9C,EAAmD;AAC/C,0BAAMN,cAAc,CAAC8B,eAAf,CAA+B,IAAIC,eAAJ,CAAoBd,OAApB,CAA/B,CAAN;AACH;AACJ,iBALD;AAMH;AACJ,aAxDD;AAyDH;AACJ,SA1HD;AA2HH,OApJD,MAoJO;AACHkB,QAAAA,MAAM,CAACC,IAAP,CAAY,GAAZ,EAAiB,OAAjB;AACH;AACJ,KA3JL;AA4JA,WAAO,MAAM;AACTrE,MAAAA,EAAE,CAACsE,KAAH;AACH,KAFD;AAGH,GAjKQ,EAiKN,CAAC1E,OAAD,CAjKM,CAAT;AAmKA,sBAAO;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACH;AAAK,MAAA,SAAS,EAAC,SAAf;AAAyB,MAAA,KAAK,EAAE;AAAC2E,QAAAA,IAAI,EAAE;AAAP;AAAhC;AAAA;AAAA;AAAA;AAAA,YADG,eAIH;AAAK,MAAA,SAAS,EAAC,SAAf;AAAyB,MAAA,KAAK,EAAE;AAACA,QAAAA,IAAI,EAAE,MAAP;AAAeC,QAAAA,QAAQ,EAAE;AAAzB,OAAhC;AAAA,8BACI;AAAO,QAAA,EAAE,EAAC,YAAV;AAAuB,QAAA,KAAK,MAA5B;AAA6B,QAAA,QAAQ,MAArC;AAAsC,QAAA,WAAW;AAAjD;AAAA;AAAA;AAAA;AAAA,cADJ,eAC8D;AAAA;AAAA;AAAA;AAAA,cAD9D,EAEK1E,aAAa,CAAC2E,GAAd,CAAkB9B,YAAY,IAAI;AAC/B,4BAAO;AAAA,kCACH;AAAO,YAAA,GAAG,EAAEvB,KAAK,IAAI;AAACA,cAAAA,KAAK,CAACI,SAAN,GAAkBmB,YAAlB;AAAgC,aAAtD;AAAwD,YAAA,QAAQ,MAAhE;AAAiE,YAAA,WAAW;AAA5E;AAAA;AAAA;AAAA;AAAA,kBADG,eACkF;AAAA;AAAA;AAAA;AAAA,kBADlF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAGH,OAJA,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,YAJG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAaH;;GArLuBlD,U;;KAAAA,U","sourcesContent":["import axios from 'axios';\r\nimport {useEffect, useState} from 'react';\r\nimport io from \"socket.io-client\";\r\nimport Cookies from 'js-cookie';\r\n\r\nexport default function ApplyTutor(props) {\r\n    const {setDisplayNavbar, setUser, courseId} = props;\r\n    const [remoteStreams, setRemoteStreams] = useState([]);\r\n    \r\n    setDisplayNavbar(true);\r\n    useEffect(() => {\r\n        const ac = new AbortController();\r\n        axios.get('/auth/isLoggedIn')\r\n            .then(res => res.data)\r\n            .catch(err => console.log(err))\r\n            .then(async (res) => {\r\n                if (res.isLoggedIn) {\r\n                    const user = res.user;\r\n                    setUser(user);\r\n                    const configuration = {\r\n                        iceServers: [\r\n                            {\r\n                                urls: [\r\n                                'stun:stun1.l.google.com:19302',\r\n                                'stun:stun2.l.google.com:19302',\r\n                                ],\r\n                            },\r\n                            ],\r\n                            iceCandidatePoolSize: 10,\r\n                    };\r\n                    const localStream = await navigator.mediaDevices.getUserMedia({\r\n                        video: true,\r\n                        audio: true\r\n                    })\r\n                    document.querySelector('#localVideo').srcObject = localStream;\r\n                    const socket = io.connect(\"http://localhost:5000\", {\r\n                        query: 'session_id=' + Cookies.get('connect.sid').replace('s:','').split('.')[0]\r\n                    });\r\n\r\n                    socket.emit('courseId', courseId);\r\n\r\n                    socket.on('newclient', async (newClientId) => {\r\n                        const peerConnection = new RTCPeerConnection(configuration);\r\n                        localStream.getTracks().forEach(track => {\r\n                            peerConnection.addTrack(track, localStream);\r\n                        })\r\n                        if (newClientId !== res.user._id) {\r\n                            // as caller\r\n                            socket.emit('callerPing', {\r\n                                from: user._id,\r\n                                destination: newClientId,\r\n                            })\r\n\r\n                            socket.on('calleePing', async (msg) => {\r\n                                if (msg.destination == user._id && msg.from === newClientId) {\r\n                                    const remoteStream = new MediaStream();\r\n                                    setRemoteStreams(prevData => {\r\n                                        return [...prevData, remoteStream];\r\n                                    })\r\n                                    peerConnection.addEventListener('track', event => {\r\n                                        event.streams[0].getTracks().forEach(track => {\r\n                                            remoteStream.addTrack(track);\r\n                                        })\r\n                                    })\r\n\r\n                                    peerConnection.addEventListener('icecandidate', event => {\r\n                                        if (!event.candidate) {\r\n                                            return;\r\n                                        }\r\n                                        socket.emit('callerCandidates', {\r\n                                            from: user._id,\r\n                                            destination: newClientId,\r\n                                            content: event.candidate.toJSON()\r\n                                        })\r\n                                    })\r\n        \r\n                                    const offer = await peerConnection.createOffer();\r\n                                    await peerConnection.setLocalDescription(offer);\r\n                                    const roomWithOffer = {\r\n                                        type: offer.type,\r\n                                        sdp: offer.sdp\r\n                                    };\r\n                                    socket.emit('offer', {\r\n                                        from: user._id,\r\n                                        destination: newClientId,\r\n                                        content: roomWithOffer\r\n                                    })    \r\n                                    \r\n                                    socket.on('answer', async (answer) => {\r\n                                        const {from, destination, content} = answer;\r\n                                        if (from === newClientId && destination === user._id) {\r\n                                            const rtcSessionDescription = new RTCSessionDescription(content);\r\n                                            await peerConnection.setRemoteDescription(rtcSessionDescription);\r\n                                        }\r\n                                    })\r\n        \r\n                                    socket.on('calleeCandidates', async (icecandidate) => {\r\n                                        const {from, content} = icecandidate;\r\n                                        if (from === newClientId) {\r\n                                            await peerConnection.addIceCandidate(new RTCIceCandidate(content))\r\n                                        }\r\n                                    })\r\n                                }\r\n                            })\r\n                        } else {\r\n                            socket.on('callerPing', msg => {\r\n                                if (msg.destination === user._id) {\r\n                                    const callerId = msg.from;\r\n                                    socket.emit('calleePing', {\r\n                                        from: user._id,\r\n                                        destination: callerId\r\n                                    })\r\n\r\n                                    const remoteStream = new MediaStream();\r\n                                    setRemoteStreams(prevData => {\r\n                                        return [...prevData, remoteStream];\r\n                                    })\r\n                                    peerConnection.addEventListener('track', event => {\r\n                                        event.streams[0].getTracks().forEach(track => {\r\n                                            remoteStream.addTrack(track);\r\n                                        })\r\n                                    })\r\n                                    \r\n                                    peerConnection.addEventListener('icecandidate', event => {\r\n                                        if (!event.candidate) {\r\n                                            return;\r\n                                        }\r\n                                        socket.emit('calleeCandidates', {\r\n                                            from: user._id,\r\n                                            destination: callerId,\r\n                                            content: event.candidate.toJSON()\r\n                                        })\r\n                                    })\r\n\r\n                                    socket.on('offer', async (offer) => {\r\n                                        const {from, destination, content} = offer;\r\n                                        if (from === callerId && destination === user._id) {\r\n                                            await peerConnection.setRemoteDescription(new RTCSessionDescription(content));\r\n                                            const answer = await peerConnection.createAnswer();\r\n                                            await peerConnection.setLocalDescription(answer);\r\n\r\n                                            const roomWithAnswer = {\r\n                                                type: answer.type,\r\n                                                sdp: answer.sdp\r\n                                            }\r\n\r\n                                            socket.emit('answer', {\r\n                                                from: user._id,\r\n                                                destination: callerId,\r\n                                                content: roomWithAnswer\r\n                                            })\r\n                                        }\r\n                                    })\r\n\r\n                                    socket.on('callerCandidates', async (icecandidate) => {\r\n                                        const {from, destination, content} = icecandidate;\r\n                                        if (from === callerId && destination === user._id) {\r\n                                            await peerConnection.addIceCandidate(new RTCIceCandidate(content));\r\n                                        }\r\n                                    })\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n                } else {\r\n                    window.open('/', '_self');\r\n                }\r\n            })\r\n        return () => {\r\n            ac.abort();\r\n        }\r\n    }, [setUser])\r\n\r\n    return <div className=\"wrapper\">\r\n        <div className=\"content\" style={{flex: \"0.75\"}}>\r\n\r\n        </div>\r\n        <div className=\"sidebar\" style={{flex: \"0.25\", overflow: \"auto\"}}>\r\n            <video id=\"localVideo\" muted autoPlay playsInLine></video><br />\r\n            {remoteStreams.map(remoteStream => {\r\n                return <div>\r\n                    <video ref={video => {video.srcObject = remoteStream;}} autoPlay playsInLine></video><br />\r\n                </div>;\r\n            })}\r\n        </div>\r\n    </div>\r\n}"]},"metadata":{},"sourceType":"module"}