[{"C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\index.js":"1","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\reportWebVitals.js":"2","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\App.js":"3","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\Home.js":"4","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\Auth.js":"5","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\ApplyTutor.js":"6","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\AdminDashboard.js":"7","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\TutorDashboard.js":"8","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\Navbar.js":"9","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\Search.js":"10","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\TutorPage.js":"11","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\Room.js":"12"},{"size":503,"mtime":1619897593221,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1619437713828,"results":"15","hashOfConfig":"14"},{"size":4170,"mtime":1619904151556,"results":"16","hashOfConfig":"14"},{"size":2643,"mtime":1619903744388,"results":"17","hashOfConfig":"14"},{"size":6029,"mtime":1619640647388,"results":"18","hashOfConfig":"14"},{"size":39036,"mtime":1619877068902,"results":"19","hashOfConfig":"14"},{"size":16438,"mtime":1619877009319,"results":"20","hashOfConfig":"14"},{"size":17184,"mtime":1619903846302,"results":"21","hashOfConfig":"14"},{"size":2915,"mtime":1619898227848,"results":"22","hashOfConfig":"14"},{"size":5438,"mtime":1619899006001,"results":"23","hashOfConfig":"14"},{"size":13554,"mtime":1619902333239,"results":"24","hashOfConfig":"14"},{"size":9782,"mtime":1619906190926,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"10dwz73",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"28"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\index.js",[],["58","59"],"C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\reportWebVitals.js",[],"C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\App.js",[],"C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\Home.js",["60","61"],"import {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default function Home(props) {\r\n    const {setDisplayNavbar, setUser} = props;\r\n    const [sessions, setSessions] = useState([]);\r\n    setDisplayNavbar(true);\r\n    useEffect(() => {\r\n        const ac = new AbortController();\r\n\r\n        axios.get('/auth/isLoggedIn')\r\n            .then(res => res.data)\r\n            .catch(err => console.log(err))\r\n            .then(res => {\r\n                if (res.isLoggedIn) {\r\n                    const user = res.user;\r\n                    console.log(user);\r\n                    setUser(user);\r\n                    axios.get('/course/getRegisteredCourses')\r\n                        .then(res => res.data)\r\n                        .catch(err => console.log(err))\r\n                        .then(res => {\r\n                            if (res.success) {\r\n                                setSessions(res.result)\r\n                            } else {\r\n                                alert('Failed to get sessions');\r\n                            }\r\n                        })\r\n                } else {\r\n                    window.open('/', '_self');\r\n                }\r\n            })\r\n\r\n        return () => {\r\n            ac.abort();\r\n        }\r\n    }, [setUser]);\r\n    return <div className=\"wrapper\">\r\n        <div className=\"sidebar\">\r\n            <ul>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#upcomingSessions\";\r\n                }}>Sessions</li>\r\n            </ul>\r\n        </div>\r\n        <div className=\"content\">\r\n            <div className=\"box\">\r\n                <a name=\"upcomingSessions\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Sessions</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    {sessions.length === 0 && \"Your sessions will appear here.\"}\r\n                    {sessions.map(session => {\r\n                        return <div className=\"box\" style={{width: \"40%\"}}>\r\n                            <div className=\"box_top\">\r\n                                <h2>{session.title}</h2>\r\n                            </div>\r\n                            <div className=\"box_bottom\">\r\n                                <u style={{cursor: \"pointer\"}} onClick={() => {\r\n                                    window.open('/room/' + session.course_id, '_self');\r\n                                }}>Click this link to open the meeting</u>\r\n                            </div>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\Auth.js",[],"C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\ApplyTutor.js",["62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81"],"import axios from 'axios';\r\nimport {useEffect, useState} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport ReactAvatarEdit from 'react-avatar-edit';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ReactAvatar from '@material-ui/core/Avatar';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    large: {\r\n        width: theme.spacing(14),\r\n        height: theme.spacing(14),\r\n    },\r\n    formControl: {\r\n        marginTop: \"1em\",\r\n        minWidth: 120,\r\n    },\r\n    formControl2: {\r\n        marginTop: \"1em\",\r\n        marginLeft: \"1em\",\r\n        minWidth: 120,\r\n    },\r\n    formControl3: {\r\n        marginLeft: \"1em\",\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nexport default function ApplyTutor(props) {\r\n    const {setDisplayNavbar, setUser} = props;\r\n    const [localUser, setLocalUser] = useState();\r\n    const classes = useStyles();\r\n    const [isApplying, setIsApplying] = useState(false);\r\n    \r\n    setDisplayNavbar(true);\r\n    useEffect(() => {\r\n        const ac = new AbortController();\r\n        axios.get('/auth/isLoggedIn')\r\n            .then(res => res.data)\r\n            .catch(err => console.log(err))\r\n            .then(res => {\r\n                if (res.isLoggedIn) {\r\n                    const user = res.user;\r\n                    setUser(user);\r\n                    setLocalUser(user);\r\n                    axios.get('/tutor/isApplyingTutor')\r\n                        .then(res => res.data)\r\n                        .catch(err => console.log(err))\r\n                        .then(res => {\r\n                            if (res.success) {\r\n                                if (res.is_applying) {\r\n                                    setIsApplying(true);\r\n                                }\r\n                            } else {\r\n                                alert(\"Failed to get request\");\r\n                            }\r\n                        })\r\n                } else {\r\n                    window.open('/', '_self');\r\n                }\r\n            })\r\n        return () => {\r\n            ac.abort();\r\n        }\r\n    }, [setUser]);\r\n\r\n    const [avatarData, setAvatarData] = useState({\r\n        preview: null,\r\n        src: null,\r\n        file: null,\r\n        currentExtension: null,\r\n        originalFile: null\r\n    });\r\n\r\n    const [uploadingNewFile, setUploadingNewFile] = useState(false);\r\n\r\n    function onClose() {\r\n        setUploadingNewFile(false);\r\n        setAvatarData({preview: null, src: null, file: null, originalFile: null});\r\n    }\r\n    \r\n    async function onCrop(preview) {\r\n        setAvatarData(prevData => {\r\n            return {...prevData, preview};\r\n        })\r\n        const currentExtension = avatarData.currentExtension;\r\n        const file = await urltoFile(preview, 'userImage.' + currentExtension, 'image/' + currentExtension)\r\n        setAvatarData(prevData => {\r\n            return {...prevData, file: file};\r\n        })\r\n    }\r\n    \r\n    function onBeforeFileLoad(event) {\r\n        const re = /\\.(gif|jpe?g|tiff?|png|webp|bmp)$/i;\r\n        const file = event.target.files[0];\r\n        if (file.size > 1000000000000000) {\r\n            event.target.value = \"\";\r\n            alert(\"File size is too big.\")\r\n        } else if (!re.test(file.name)) {\r\n            alert(\"File extension is not allowed.\")\r\n        } else {\r\n            setUploadingNewFile(true);\r\n            const separator = /(?:\\.([^.]+))?$/;\r\n            setAvatarData(prevData => {\r\n                return {...prevData, currentExtension: separator.exec(file.name)[1], originalFile: file};\r\n            })\r\n        }\r\n    }\r\n    \r\n    function urltoFile(url, filename, mimeType){\r\n        return (fetch(url)\r\n            .then(function(res){return res.arrayBuffer();})\r\n            .then(function(buf){return new File([buf], filename,{type:mimeType});})\r\n        );\r\n    }\r\n\r\n    const [gender, setGender] = useState(1);\r\n    const [country, setCountry] = useState(\"Indonesia\");\r\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n    const [headline, setHeadline] = useState(\"\");\r\n    const [selfDescription, setSelfDescription] = useState(\"\");\r\n    const [chosenSubjects, setChosenSubjects] = useState([]);\r\n    const [educations, setEducations] = useState([]);\r\n\r\n    const [experiences, setExperiences] = useState([]);\r\n\r\n    const years = [];\r\n    for (var i = 1980; i < 2051; i++) {\r\n        years.push(i);\r\n    }\r\n\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const availableSubjects = [\r\n        \"Mathematics\",\r\n        \"Physics\",\r\n        \"Computer science\",\r\n        \"Biology\",\r\n        \"Chemistry\",\r\n        \"Music\",\r\n        \"Guitar\",\r\n        \"Piano\",\r\n        \"Drum\",\r\n        \"Saxophone\",\r\n        \"Vocal\",\r\n        \"Robotics\",\r\n        \"Dance\",\r\n        \"Culinary\",\r\n        \"Politics\",\r\n        \"Photography\",\r\n        \"Machine Learning\",\r\n        \"Entrepreneurship\",\r\n        \"Aerodynamics\",\r\n        \"React\",\r\n        \"Redux\",\r\n        \"MongoDB\",\r\n        \"SQL\",\r\n        \"PostGreSql\",\r\n        \"Astronomy\",\r\n        \"Korean\",\r\n        \"English\",\r\n        \"Mandarin\",\r\n        \"Statistical Mechanics\",\r\n        \"Data Science\",\r\n        \"Linear Algebra\",\r\n        \"iOS Development\",\r\n        \"Android Development\",\r\n        \"HTML\",\r\n        \"Web Development\",\r\n        \"Calculus\",\r\n        \"Organic Chemistry\",\r\n        \"Irish\",\r\n        \"Chemical Engineering\",\r\n        \"Agricultural Economics\",\r\n        \"Civil Engineering\",\r\n        \"Software Testing\",\r\n        \"Data Visualization\",\r\n        \"Economics\",\r\n        \"Business\",\r\n        \"User Experience\",\r\n        \"Zoology\",\r\n        \"Marine Biology\",\r\n        \"Aerospace Engineering\",\r\n        \"Mechanical Engineering\",\r\n        \"Fashion\",\r\n        \"Unix\",\r\n        \"JavaScript\",\r\n        \"Python\",\r\n        \"Java\",\r\n        \"C++\",\r\n        \"Ruby\",\r\n        \"Go\",\r\n        \"Health and Science\",\r\n        \"Music Theory\",\r\n        \"Martial Arts\",\r\n        \"Game Development\",\r\n        \"Microsoft Word\",\r\n        \"Microsoft Excel\",\r\n        \"REST API\",\r\n        \"Photoshop\",\r\n        \"Yoga\",\r\n        \"Pole Dance\",\r\n        \"Philosophy\",\r\n        \"LaTeX\",\r\n        \"German\",\r\n        \"Arabic\",\r\n        \"Criminal Justice\",\r\n        \"Parenting\",\r\n        \"Indonesian History\",\r\n        \"Electrical Engineering\",\r\n        \"MatLab\",\r\n        \"Epidemiology\",\r\n        \"Microbiology\",\r\n        \"Discrete Math\",\r\n        \"Creative Writing\",\r\n        \"Stand up comedy\",\r\n        \"Industrial Engineering\",\r\n        \"Autism\",\r\n        \"Tourism\",\r\n        \"Physiology\",\r\n        \"LinkedIn\",\r\n        \"Neuroscience\",\r\n        \"Animation\",\r\n        \"Interior design\",\r\n        \"Blockchain\",\r\n        \"Electronics Engineering\",\r\n        \"TensorFlow\",\r\n        \"Journalism\",\r\n        \"Psychology\"\r\n    ]\r\n\r\n    return <div className=\"wrapper\">\r\n        <div className=\"sidebar\">\r\n            <h2>Apply</h2>\r\n            <ul>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#personalInformation\";\r\n                }}><a href=\"#personalInformation\">Personal information</a></li>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#subjects\";\r\n                }}><a href=\"#subjects\">Subjects</a></li>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#education\";\r\n                }}><a href=\"#education\">Education</a></li>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#experience\";\r\n                }}><a href=\"#experience\">Experience</a></li>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#policyAgreement\";\r\n                }}><a href=\"#policyAgreement\">Policy Agreement</a></li>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#submitApplication\";\r\n                }}><a href=\"#submitApplication\">Submit Application</a></li>\r\n            </ul>\r\n        </div>\r\n        {!isApplying ? <div className=\"content\">\r\n            <div className=\"box\">\r\n                <a name=\"personalInformation\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Personal information</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    <form>\r\n                        <TextField \r\n                            id=\"outlined-basic\" \r\n                            label=\"Phone number\" \r\n                            variant=\"outlined\"\r\n                            value={phoneNumber}\r\n                            onChange={(event) => {\r\n                                setPhoneNumber(event.target.value);\r\n                            }} />\r\n                        <TextField \r\n                            style={{marginLeft: \"1em\"}} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Headline\" \r\n                            variant=\"outlined\"\r\n                            value={headline}\r\n                            onChange={(event) => {\r\n                                setHeadline(event.target.value);\r\n                            }} />\r\n                        <br />\r\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                            <InputLabel id=\"demo-simple-select-outlined-label\">Gender</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-outlined-label\"\r\n                                id=\"demo-simple-select-outlined\"\r\n                                value={gender}\r\n                                onChange={(event) => {\r\n                                    setGender(event.target.value);\r\n                                }}\r\n                                label=\"Gender\"\r\n                            >\r\n                                <MenuItem value={1}>Male</MenuItem>\r\n                                <MenuItem value={0}>Female</MenuItem>\r\n                                <MenuItem value={-1}>Prefer not to say</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl variant=\"outlined\" className={classes.formControl2}>\r\n                            <InputLabel id=\"demo-simple-select-outlined-label\">Country</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-outlined-label\"\r\n                                id=\"demo-simple-select-outlined\"\r\n                                value={country}\r\n                                onChange={(event) => {\r\n                                    setCountry(event.target.value);\r\n                                }}\r\n                                label=\"Country\"\r\n                            >   \r\n                                <MenuItem value={\"Australia\"}>Australia</MenuItem>\r\n                                <MenuItem value={\"Canada\"}>Canada</MenuItem>\r\n                                <MenuItem value={\"Indonesia\"}>Indonesia</MenuItem>\r\n                                <MenuItem value={\"Ireland\"}>Ireland</MenuItem>\r\n                                <MenuItem value={\"Malaysia\"}>Malaysia</MenuItem>\r\n                                <MenuItem value={\"Singapore\"}>Singapore</MenuItem>\r\n                                <MenuItem value={\"United Kingdom\"}>United Kingdom</MenuItem>\r\n                                <MenuItem value={\"United States of America\"}>United States of America</MenuItem>\r\n                                <MenuItem value={\"Others\"}>Others</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <br />\r\n                        <TextField\r\n                            placeholder=\"Description about yourself\"\r\n                            multiline\r\n                            rows={4}\r\n                            rowsMax={4}\r\n                            variant=\"outlined\"\r\n                            value={selfDescription}\r\n                            onChange={(event) => {\r\n                                setSelfDescription(event.target.value);\r\n                            }}\r\n                            style={{marginTop: \"1em\", width: \"61.6%\"}}\r\n                        />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n            <div className=\"box\">\r\n                <a name=\"subjects\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Subjects</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                <Autocomplete\r\n                    onChange={(event, value) => {\r\n                        setChosenSubjects(value);\r\n                    }}\r\n                    multiple\r\n                    limitTags={2}\r\n                    id=\"multiple-limit-tags\"\r\n                    options={availableSubjects}\r\n                    getOptionLabel={(option) => option}\r\n                    renderInput={(params) => (\r\n                        <TextField {...params} variant=\"outlined\" label=\"Available subjects\" placeholder=\"Favorites\" />\r\n                    )}\r\n                />\r\n                </div>\r\n            </div>\r\n            <div className=\"box\">\r\n                <a name=\"education\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Education</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    <Button \r\n                        variant=\"outlined\" \r\n                        color=\"secondary\"\r\n                        id=\"specialAddMoreEducation\"\r\n                        onClick={() => {\r\n                            setEducations(prevData => {\r\n                                document.getElementById(\"specialAddMoreEducation\").style.display = \"none\";\r\n                                return [...prevData, {\r\n                                    school: \"\",\r\n                                    fromYear: 2021,\r\n                                    toYear: 2021,\r\n                                    degree: \"\",\r\n                                    fieldOfStudy: \"\",\r\n                                    description: \"\"\r\n                                }]\r\n                            })\r\n                        }}>\r\n                        add more education\r\n                    </Button>\r\n                    {educations.map((education, index) =>{\r\n                        return <div><TextField \r\n                            id=\"outlined-basic\" \r\n                            label=\"School\" \r\n                            variant=\"outlined\"\r\n                            value={education.school}\r\n                            onChange={(event) => {\r\n                                setEducations(prevData => {\r\n                                    const temp = [];\r\n                                    for (var i = 0; i < prevData.length; i++) {\r\n                                        if (i === index) {\r\n                                            temp.push({\r\n                                                ...prevData[index],\r\n                                                school: event.target.value\r\n                                            })\r\n                                        } else {\r\n                                            temp.push(prevData[i]);\r\n                                        }\r\n                                    }\r\n                                    return temp;\r\n                                })\r\n                            }} />\r\n                        <FormControl variant=\"outlined\" className={classes.formControl3}>\r\n                            <InputLabel id=\"demo-simple-select-outlined-label\">From year</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-outlined-label\"\r\n                                id=\"demo-simple-select-outlined\"\r\n                                value={education.fromYear}\r\n                                onChange={(event) => {\r\n                                    setEducations(prevData => {\r\n                                        const temp = [];\r\n                                        for (var i = 0; i < prevData.length; i++) {\r\n                                            if (i === index) {\r\n                                                temp.push({\r\n                                                    ...prevData[index],\r\n                                                    fromYear: event.target.value\r\n                                                })\r\n                                            } else {\r\n                                                temp.push(prevData[i]);\r\n                                            }\r\n                                        }\r\n                                        return temp;\r\n                                    })\r\n                                }}\r\n                                label=\"From Year\"\r\n                            >   \r\n                                {years.map(year => {\r\n                                   return <MenuItem value={year}>{year}</MenuItem> \r\n                                })}\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl variant=\"outlined\" className={classes.formControl3}>\r\n                            <InputLabel id=\"demo-simple-select-outlined-label\">To year</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-outlined-label\"\r\n                                id=\"demo-simple-select-outlined\"\r\n                                value={education.toYear}\r\n                                onChange={(event) => {\r\n                                    setEducations(prevData => {\r\n                                        const temp = [];\r\n                                        for (var i = 0; i < prevData.length; i++) {\r\n                                            if (i === index) {\r\n                                                temp.push({\r\n                                                    ...prevData[index],\r\n                                                    toYear: event.target.value\r\n                                                })\r\n                                            } else {\r\n                                                temp.push(prevData[i]);\r\n                                            }\r\n                                        }\r\n                                        return temp;\r\n                                    })\r\n                                }}\r\n                                label=\"To Year\"\r\n                            >   \r\n                                {years.map(year => {\r\n                                   return <MenuItem value={year}>{year}</MenuItem> \r\n                                })}\r\n                            </Select>\r\n                        </FormControl><br />\r\n                        <TextField \r\n                            style={{marginTop: \"1em\"}} \r\n                            id=\"outlined-basic\" \r\n                            label=\"Degree\" \r\n                            variant=\"outlined\"\r\n                            value={education.degree}\r\n                            onChange={(event) => {\r\n                                setEducations(prevData => {\r\n                                    const temp = [];\r\n                                    for (var i = 0; i < prevData.length; i++) {\r\n                                        if (i === index) {\r\n                                            temp.push({\r\n                                                ...prevData[index],\r\n                                                degree: event.target.value\r\n                                            })\r\n                                        } else {\r\n                                            temp.push(prevData[i]);\r\n                                        }\r\n                                    }\r\n                                    return temp;\r\n                                })\r\n                            }} />\r\n                        <TextField\r\n                            style={{marginTop: \"1em\", marginLeft: \"1em\"}}  \r\n                            id=\"outlined-basic\" \r\n                            label=\"Field of study\" \r\n                            variant=\"outlined\"\r\n                            value={education.fieldOfStudy}\r\n                            onChange={(event) => {\r\n                                setEducations(prevData => {\r\n                                    const temp = [];\r\n                                    for (var i = 0; i < prevData.length; i++) {\r\n                                        if (i === index) {\r\n                                            temp.push({\r\n                                                ...prevData[index],\r\n                                                fieldOfStudy: event.target.value\r\n                                            })\r\n                                        } else {\r\n                                            temp.push(prevData[i]);\r\n                                        }\r\n                                    }\r\n                                    return temp;\r\n                                })\r\n                            }} /><br />\r\n                        <TextField\r\n                            placeholder=\"Description\"\r\n                            multiline\r\n                            rows={4}\r\n                            rowsMax={4}\r\n                            variant=\"outlined\"\r\n                            value={education.description}\r\n                            onChange={(event) => {\r\n                                setEducations(prevData => {\r\n                                    const temp = [];\r\n                                    for (var i = 0; i < prevData.length; i++) {\r\n                                        if (i === index) {\r\n                                            temp.push({\r\n                                                ...prevData[index],\r\n                                                description: event.target.value\r\n                                            })\r\n                                        } else {\r\n                                            temp.push(prevData[i]);\r\n                                        }\r\n                                    }\r\n                                    return temp;\r\n                                })\r\n                            }}\r\n                            style={{marginTop: \"1em\", width: \"50%\"}}\r\n                        /><br /><br />\r\n                        <Button \r\n                            variant=\"outlined\" \r\n                            color=\"secondary\"\r\n                            id={index.toString()}\r\n                            onClick={() => {\r\n                                setEducations(prevData => {\r\n                                    document.getElementById(index.toString()).style.visibility = \"hidden\";\r\n                                    return [...prevData, {\r\n                                        school: \"\",\r\n                                        fromYear: 2021,\r\n                                        toYear: 2021,\r\n                                        degree: \"\",\r\n                                        fieldOfStudy: \"\",\r\n                                        description: \"\"\r\n                                    }]\r\n                                })\r\n                            }}>\r\n                            add more education\r\n                        </Button></div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className=\"box\">\r\n                <a name=\"experience\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Experience</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    <Button \r\n                        variant=\"outlined\" \r\n                        color=\"secondary\"\r\n                        id=\"specialAddMoreExperiences\"\r\n                        onClick={() => {\r\n                            setExperiences(prevData => {\r\n                                document.getElementById(\"specialAddMoreExperiences\").style.display = \"none\";\r\n                                return [...prevData, {\r\n                                    company: \"\",\r\n                                    jobTitle: \"\",\r\n                                    fromYear: 2021,\r\n                                    toYear: 2021,\r\n                                    description: \"\",\r\n                                    jobDescription: \"\"\r\n                                }]\r\n                            })\r\n                        }}>\r\n                        add more experience\r\n                    </Button>\r\n                    {experiences.map((experience, index) => {\r\n                        return <div>\r\n                            <TextField \r\n                                id=\"outlined-basic\" \r\n                                label=\"Company\" \r\n                                variant=\"outlined\"\r\n                                value={experience.company}\r\n                                onChange={(event) => {\r\n                                    setExperiences(prevData => {\r\n                                        const temp = [];\r\n                                        for (var i = 0; i < prevData.length; i++) {\r\n                                            if (i === index) {\r\n                                                temp.push({\r\n                                                    ...prevData[index],\r\n                                                    company: event.target.value\r\n                                                })\r\n                                            } else {\r\n                                                temp.push(prevData[i]);\r\n                                            }\r\n                                        }\r\n                                        return temp;\r\n                                    })\r\n                                }} />\r\n                            <FormControl variant=\"outlined\" className={classes.formControl3}>\r\n                                <InputLabel id=\"demo-simple-select-outlined-label\">From year</InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-outlined-label\"\r\n                                    id=\"demo-simple-select-outlined\"\r\n                                    value={experiences.fromYear}\r\n                                    onChange={(event) => {\r\n                                        setExperiences(prevData => {\r\n                                            const temp = [];\r\n                                            for (var i = 0; i < prevData.length; i++) {\r\n                                                if (i === index) {\r\n                                                    temp.push({\r\n                                                        ...prevData[index],\r\n                                                        fromYear: event.target.value\r\n                                                    })\r\n                                                } else {\r\n                                                    temp.push(prevData[i]);\r\n                                                }\r\n                                            }\r\n                                            return temp;\r\n                                        })\r\n                                    }}\r\n                                    label=\"From Year\"\r\n                                >   \r\n                                    {years.map(year => {\r\n                                    return <MenuItem value={year}>{year}</MenuItem> \r\n                                    })}\r\n                                </Select>\r\n                            </FormControl>\r\n                            <FormControl variant=\"outlined\" className={classes.formControl3}>\r\n                                <InputLabel id=\"demo-simple-select-outlined-label\">To year</InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-outlined-label\"\r\n                                    id=\"demo-simple-select-outlined\"\r\n                                    value={experiences.toYear}\r\n                                    onChange={(event) => {\r\n                                        setExperiences(prevData => {\r\n                                            const temp = [];\r\n                                            for (var i = 0; i < prevData.length; i++) {\r\n                                                if (i === index) {\r\n                                                    temp.push({\r\n                                                        ...prevData[index],\r\n                                                        toYear: event.target.value\r\n                                                    })\r\n                                                } else {\r\n                                                    temp.push(prevData[i]);\r\n                                                }\r\n                                            }\r\n                                            return temp;\r\n                                        })\r\n                                    }}\r\n                                    label=\"To Year\"\r\n                                >   \r\n                                    {years.map(year => {\r\n                                        return <MenuItem value={year}>{year}</MenuItem> \r\n                                    })}\r\n                                </Select>\r\n                            </FormControl><br /><br />\r\n                            <TextField \r\n                                id=\"outlined-basic\" \r\n                                label=\"Job title\" \r\n                                variant=\"outlined\"\r\n                                value={experience.jobTitle}\r\n                                onChange={(event) => {\r\n                                    setExperiences(prevData => {\r\n                                        const temp = [];\r\n                                        for (var i = 0; i < prevData.length; i++) {\r\n                                            if (i === index) {\r\n                                                temp.push({\r\n                                                    ...prevData[index],\r\n                                                    jobTitle: event.target.value\r\n                                                })\r\n                                            } else {\r\n                                                temp.push(prevData[i]);\r\n                                            }\r\n                                        }\r\n                                        return temp;\r\n                                    })\r\n                                }} />\r\n                            <TextField \r\n                                id=\"outlined-basic\" \r\n                                label=\"Job description\" \r\n                                variant=\"outlined\"\r\n                                style={{marginLeft: \"1em\"}}\r\n                                value={experience.jobDescription}\r\n                                onChange={(event) => {\r\n                                    setExperiences(prevData => {\r\n                                        const temp = [];\r\n                                        for (var i = 0; i < prevData.length; i++) {\r\n                                            if (i === index) {\r\n                                                temp.push({\r\n                                                    ...prevData[index],\r\n                                                    jobDescription: event.target.value\r\n                                                })\r\n                                            } else {\r\n                                                temp.push(prevData[i]);\r\n                                            }\r\n                                        }\r\n                                        return temp;\r\n                                    })\r\n                                }} /><br />\r\n                            <TextField\r\n                                placeholder=\"Description\"\r\n                                multiline\r\n                                rows={4}\r\n                                rowsMax={4}\r\n                                variant=\"outlined\"\r\n                                value={experiences.description}\r\n                                onChange={(event) => {\r\n                                    setExperiences(prevData => {\r\n                                        const temp = [];\r\n                                        for (var i = 0; i < prevData.length; i++) {\r\n                                            if (i === index) {\r\n                                                temp.push({\r\n                                                    ...prevData[index],\r\n                                                    description: event.target.value\r\n                                                })\r\n                                            } else {\r\n                                                temp.push(prevData[i]);\r\n                                            }\r\n                                        }\r\n                                        return temp;\r\n                                    })\r\n                                }}\r\n                                style={{marginTop: \"1em\", width: \"50%\"}}\r\n                            /><br /><br />\r\n                            <Button \r\n                                variant=\"outlined\" \r\n                                color=\"secondary\"\r\n                                id={\"experience\" + index.toString()}\r\n                                onClick={() => {\r\n                                    setExperiences(prevData => {\r\n                                        document.getElementById(\"experience\" + index.toString()).style.visibility = \"hidden\";\r\n                                        return [...prevData, {\r\n                                            company: \"\",\r\n                                            jobTitle: \"\",\r\n                                            fromYear: 2021,\r\n                                            toYear: 2021,\r\n                                            description: \"\"\r\n                                        }]\r\n                                    })\r\n                                }}>\r\n                                add more experience\r\n                            </Button>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <div className=\"box\">\r\n                <a name=\"policyAgreement\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Policy Agreement</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    <Checkbox\r\n                        checked={checked}\r\n                        onChange={(event) => {\r\n                            setChecked(event.target.checked);\r\n                        }}\r\n                        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                    />\r\n                    By checking the box, you agree to:\r\n                    <ul style={{marginLeft: \"2em\"}}>\r\n                        <li>All TutorGenic Terms & Conditions.</li>\r\n                        <li>Adhere to all TutorGenic Policies.</li>\r\n                        <li>Not communicate with our students outside the TutorGenic platform.</li>\r\n                        <li>Not accept payment directly from our students outside the TutorGenic platform.</li>\r\n                    </ul><br />\r\n                    <p style={{marginLeft: \"1em\"}}>Noncompliance will result in your account being terminated.</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"box\">\r\n                <a name=\"submitApplication\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Submit Application</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    <Button \r\n                        variant=\"outlined\" \r\n                        color=\"secondary\"\r\n                        onClick={() => {\r\n                            if (!checked) {\r\n                                alert(\"You must check the policy agreement before submitting.\");\r\n                            } else {\r\n                                axios.post('/admin/submitTutorApplication', {\r\n                                    personal_information: {\r\n                                        gender: gender,\r\n                                        country: country,\r\n                                        phoneNumber: phoneNumber,\r\n                                        headline: headline,\r\n                                        selfDescription: selfDescription\r\n                                    },\r\n                                    chosen_subjects: chosenSubjects,\r\n                                    educations: educations,\r\n                                    experiences: experiences\r\n                                })\r\n                                .then(res => res.data)\r\n                                .catch(err => console.log(err))\r\n                                .then(res => {\r\n                                    if (res.success) {\r\n                                        alert(\"Successful\");\r\n                                        window.open('/apply', '_self');\r\n                                    } else {\r\n                                        alert(\"Failed to submit your application.\");\r\n                                    }\r\n                                })\r\n                                .catch(err => console.log(err));\r\n                            }\r\n                        }}>\r\n                        submit\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div> : <div className=\"content\">\r\n            <div className=\"box\">\r\n                <div className=\"box_top\">\r\n                    <h2>You have already applied for a tutoring position. Please wait for the result.</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n\r\n                </div>\r\n            </div>\r\n        </div>}\r\n        \r\n    </div>\r\n}","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\AdminDashboard.js",["82","83","84","85","86","87","88","89"],"import {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useRowStyles = makeStyles({\r\n    root: {\r\n        '& > *': {\r\n            borderBottom: 'unset',\r\n        },\r\n    },\r\n});\r\n\r\nfunction Row(props) {\r\n    const { row, submitTutorSubjects } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useRowStyles();\r\n    const temp = {};\r\n    for (var i = 0; i < row.subjects.length; i++) {\r\n        temp[row.subjects[i]] = true;\r\n    };\r\n    const [subjectsApproval, setSubjectsApproval] = useState(temp);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow className={classes.root}>\r\n                <TableCell>\r\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n                    {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                    </IconButton>\r\n                </TableCell>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                    {row.email}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.first_name}</TableCell>\r\n                <TableCell align=\"right\">{row.last_name}</TableCell>\r\n                <TableCell align=\"right\">\r\n                    {row.educations.map(education => {\r\n                        return <div style={{\r\n                            textAlign: \"left\",\r\n                            maxWidth: \"200px\",\r\n                            overflowWrap: \"break-word\"\r\n                        }}>\r\n                            <b>School</b>: {education.school} <br />\r\n                            <b>From</b>: {education.fromYear} <br />\r\n                            <b>To</b>: {education.toYear} <br />\r\n                            <b>Degree</b>: {education.degree} <br />\r\n                            <b>Field of study</b>: {education.fieldOfStudy} <br />\r\n                            <b>Description</b>: {education.description}<br />\r\n                        </div>\r\n                    })}\r\n                </TableCell>\r\n                <TableCell align=\"right\">\r\n                    {row.experiences.map(experience => {\r\n                        return <div style={{\r\n                            textAlign: \"left\",\r\n                            maxWidth: \"200px\",\r\n                            overflowWrap: \"break-word\"\r\n                        }}>\r\n                            <b>Company</b>: {experience.company} <br />\r\n                            <b>Job title</b>: {experience.jobTitle} <br />\r\n                            <b>From</b>: {experience.fromYear} <br />\r\n                            <b>To</b>: {experience.toYear} <br />\r\n                            <b>Description</b>: {experience.description} <br />\r\n                        </div>\r\n                    })}\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                    <Box margin={1}>\r\n                        <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                            Proposed tutoring subjects\r\n                        </Typography>\r\n                        <Table size=\"small\" aria-label=\"purchases\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                            <TableCell>Subject</TableCell>\r\n                            <TableCell>Approve</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {row.subjects.map((subject, index) => (\r\n                                <TableRow key={index}>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {subject}\r\n                                    </TableCell>\r\n                                    <TableCell><select \r\n                                        name=\"subject_approval\" \r\n                                        id=\"subject_approval\" \r\n                                        value={subjectsApproval[subject] ? \"approve\" : \"reject\"}\r\n                                        onChange={(event) => {\r\n                                            setSubjectsApproval(prevData => {\r\n                                                const temp = {...prevData};\r\n                                                temp[subject] = event.target.value === \"approve\" ? true : false;\r\n                                                return temp;\r\n                                            });\r\n                                        }}>\r\n                                        <option value=\"approve\">approve</option>\r\n                                        <option value=\"reject\">reject</option>\r\n                                    </select></TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                            <TableRow key=\"specialKey\">\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    <b>ACTION</b>\r\n                                </TableCell>\r\n                                <TableCell><button style={{cursor: \"pointer\"}} onClick={() => {\r\n                                    submitTutorSubjects(row.applicant_id, subjectsApproval)\r\n                                }}>submit</button></TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                        </Table>\r\n                    </Box>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default function AdminDashboard(props) {\r\n    const [tutorsApplications, setTutorsApplications] = useState([]);\r\n    const {setDisplayNavbar, setUser} = props;\r\n    const [addAdminEmail, setAddAdminEmail] = useState(\"\");\r\n    const [deleteUserEmail, setDeleteUserEmail] = useState(\"\");\r\n    const [removeTutorEmail, setRemoveTutorEmail] = useState(\"\");\r\n    setDisplayNavbar(true);\r\n    useEffect(() => {\r\n        const ac = new AbortController();\r\n        axios.get('/auth/isLoggedIn')\r\n            .then(res => res.data)\r\n            .catch(err => console.log(err))\r\n            .then(res => {\r\n                if (res.isLoggedIn) {\r\n                    const user = res.user;\r\n                    if (!user.is_admin) {\r\n                        window.open('/home', '_self');\r\n                    }\r\n                    setUser(user);\r\n                    axios.get('/admin/tutorsApplications')\r\n                        .then(res => res.data)\r\n                        .catch(err => console.log(err))\r\n                        .then(res => {\r\n                            if (res.success) {\r\n                                setTutorsApplications(res.result);\r\n                            } else {\r\n                                alert(\"Failed to get tutors applications\");\r\n                            }\r\n                        })\r\n                } else {\r\n                    window.open('/', '_self');\r\n                }\r\n            })\r\n        return () => {\r\n            ac.abort();\r\n        }\r\n    }, [setUser]);\r\n\r\n    function addAdmin() {\r\n        const formData = new FormData();\r\n        formData.set('email', addAdminEmail);\r\n        setAddAdminEmail(\"\");\r\n        axios({\r\n            method: 'post',\r\n            url: '/admin/addAdmin',\r\n            data: formData,\r\n            headers: {'Content-Type': 'multipart/form-data'}\r\n        })\r\n        .then(res => res.data)\r\n        .catch(err => console.log(err))\r\n        .then(res => {\r\n            if (res.success) {\r\n                alert(\"Successfully added admin.\");\r\n            } else {\r\n                alert(\"Failed to add admin\");\r\n            }\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    function deleteUser() {\r\n        const formData = new FormData();\r\n        formData.set('email', deleteUserEmail);\r\n        setDeleteUserEmail(\"\");\r\n        axios({\r\n            method: 'post',\r\n            url: '/admin/deleteUser',\r\n            data: formData,\r\n            headers: {'Content-Type': 'multipart/form-data'}\r\n        })\r\n        .then(res => res.data)\r\n        .catch(err => console.log(err))\r\n        .then(res => {\r\n            if (res.success) {\r\n                alert(\"Successfully deleted user.\");\r\n            } else {\r\n                alert(\"Failed to delete user\");\r\n            }\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    function removeTutor() {\r\n        const formData = new FormData();\r\n        formData.set('email', removeTutorEmail);\r\n        setRemoveTutorEmail(\"\");\r\n        axios({\r\n            method: 'post',\r\n            url: '/admin/removeTutor',\r\n            data: formData,\r\n            headers: {'Content-Type': 'multipart/form-data'}\r\n        })\r\n        .then(res => res.data)\r\n        .catch(err => console.log(err))\r\n        .then(res => {\r\n            if (res.success) {\r\n                alert(\"Successfully removed tutor.\");\r\n            } else {\r\n                alert(\"Failed to remove tutor.\");\r\n            }\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    function submitTutorSubjects(applicant_id, subjectsApproval) {\r\n        const formData = new FormData();\r\n        formData.set('applicant_id', applicant_id);\r\n        for (const key in subjectsApproval) {\r\n            if (subjectsApproval[key]) {\r\n                formData.append('approved_subjects[]', key);\r\n            }\r\n        }\r\n        axios({\r\n            method: 'post',\r\n            url: '/admin/submitTutorSubjects',\r\n            data: formData,\r\n            headers: {'Content-Type': 'multipart/form-data'}\r\n        })\r\n        .then(res => res.data)\r\n        .catch(err => console.log(err))\r\n        .then(res => {\r\n            if (res.success) {\r\n                setTutorsApplications(prevData => {\r\n                    return prevData.filter(application => {\r\n                        return application.applicant_id !== applicant_id;\r\n                    })\r\n                })\r\n            } else {\r\n                alert(\"Failed to submit data\");\r\n            }\r\n        })\r\n    }\r\n\r\n    return <div className=\"wrapper\">\r\n        <div className=\"sidebar\">\r\n            <h2>Admin</h2>\r\n            <ul>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#tutorsApplications\";\r\n                }}><a href=\"#tutorsApplications\">Tutors applications</a></li>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#addAdmin\";\r\n                }}><a href=\"#addAdmin\">Add new admin</a></li>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#deleteUser\";\r\n                }}><a href=\"#deleteUser\">Delete user account</a></li>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#removeTutor\";\r\n                }}><a href=\"#removeTutor\">Remove from tutor</a></li>\r\n            </ul>\r\n        </div>\r\n        <div className=\"content\">\r\n            <div className=\"box\">\r\n                <a name=\"tutorsApplications\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Tutors Applications</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    <TableContainer component={Paper}>\r\n                        <Table aria-label=\"collapsible table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell />\r\n                                    <TableCell>Email</TableCell>\r\n                                    <TableCell align=\"right\">First name</TableCell>\r\n                                    <TableCell align=\"right\">Last name</TableCell>\r\n                                    <TableCell align=\"left\">Educations</TableCell>\r\n                                    <TableCell align=\"left\">Experiences</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {tutorsApplications.map((application) => (\r\n                                    <Row \r\n                                        key={application.applicant_id} \r\n                                        row={application} \r\n                                        submitTutorSubjects={submitTutorSubjects}/>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </div>\r\n            </div>\r\n            <div className=\"box\">\r\n                <a name=\"addAdmin\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Add new admin</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    <TextField \r\n                        id=\"outlined-basic\" \r\n                        label=\"Enter user's email\" \r\n                        variant=\"outlined\"\r\n                        value={addAdminEmail}\r\n                        onChange={(event) => {\r\n                            setAddAdminEmail(event.target.value);\r\n                        }} />\r\n                    <Button style={{\r\n                        height: \"56px\",\r\n                        marginLeft: \"1em\",\r\n                    }} onClick={addAdmin} variant=\"outlined\" color=\"secondary\">\r\n                        Add\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className=\"box\">\r\n                <a name=\"deleteUser\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Delete user account</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    <TextField \r\n                        id=\"outlined-basic\" \r\n                        label=\"Enter user's email\" \r\n                        variant=\"outlined\"\r\n                        value={deleteUserEmail}\r\n                        onChange={(event) => {\r\n                            setDeleteUserEmail(event.target.value);\r\n                        }} />\r\n                    <Button style={{\r\n                        height: \"56px\",\r\n                        marginLeft: \"1em\",\r\n                    }} onClick={deleteUser} variant=\"outlined\" color=\"secondary\">\r\n                        Delete\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className=\"box\">\r\n                <a name=\"removeTutor\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Remove from tutor</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    <TextField \r\n                        id=\"outlined-basic\" \r\n                        label=\"Enter user's email\" \r\n                        variant=\"outlined\"\r\n                        value={removeTutorEmail}\r\n                        onChange={(event) => {\r\n                            setRemoveTutorEmail(event.target.value);\r\n                        }} />\r\n                    <Button style={{\r\n                        height: \"56px\",\r\n                        marginLeft: \"1em\",\r\n                    }} onClick={removeTutor} variant=\"outlined\" color=\"secondary\">\r\n                        Remove\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\TutorDashboard.js",["90","91","92","93","94","95","96","97","98"],"import axios from 'axios';\r\nimport {useEffect, useRef, useState} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        width: 200,\r\n        marginTop: \"1em\",\r\n        color: \"white\"\r\n    }\r\n}));\r\n\r\nexport default function TutorDashboard(props) {\r\n    const classes = useStyles();\r\n    const addScheduleRef = useRef();\r\n    const {setDisplayNavbar, setUser} = props;\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\"); \r\n    const [schedules, setSchedules] = useState([]);\r\n    const [daynumbers, setDaynumbers] = useState([]);\r\n    const [dayMemo, setDayMemo] = useState(new Date());\r\n    const [sessions, setSessions] = useState([]);\r\n\r\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n    ];\r\n\r\n    setDisplayNavbar(true);\r\n    useEffect(() => {\r\n        const ac = new AbortController();\r\n        axios.get('/auth/isLoggedIn')\r\n            .then(res => res.data)\r\n            .catch(err => console.log(err))\r\n            .then(res => {\r\n                if (res.isLoggedIn) {\r\n                    const user = res.user;\r\n                    setUser(user);\r\n                    const dates = [];\r\n                    const temp = [];\r\n                    const curr_day = new Date();\r\n                    for (var i = 0; i < 7; i++) {\r\n                        if (i === curr_day.getDay()) {\r\n                            dates.push(curr_day.getFullYear() + \"-\" + (curr_day.getMonth() + 1) + \"-\" + curr_day.getDate());\r\n                            temp.push(curr_day.getDate());\r\n                        } else {\r\n                            const other_day = new Date(curr_day.getTime());\r\n                            if (i < curr_day.getDay()) {\r\n                                other_day.setDate(curr_day.getDate() - (curr_day.getDay() - i));\r\n                            } else {\r\n                                other_day.setDate(curr_day.getDate() + (i - curr_day.getDay()));\r\n                            }\r\n                            temp.push(other_day.getDate());\r\n                            dates.push(other_day.getFullYear() + \"-\" + (other_day.getMonth() + 1) + \"-\" + other_day.getDate())\r\n                        }\r\n                    }\r\n                    setDaynumbers(temp);\r\n                    const formData = new FormData();\r\n                    for (var i = 0; i < 7; i++) {\r\n                        formData.append('dates[]', dates[i]);\r\n                    }\r\n                    axios({\r\n                        method: 'post',\r\n                        url: '/tutor/getSchedule',\r\n                        data: formData,\r\n                        headers: {'Content-Type': 'multipart/form-data'}\r\n                    })\r\n                    .then(res => res.data)\r\n                    .catch(err => console.log(err))\r\n                    .then(res => {\r\n                        if (res.success) {\r\n                            setSchedules(res.result);\r\n                        } else {\r\n                            alert('Failed');\r\n                        }\r\n                    })\r\n                    axios.get('/course/getScheduledCourses')\r\n                        .then(res => res.data)\r\n                        .catch(err => console.log(err))\r\n                        .then(res => {\r\n                            if (res.success) {\r\n                                setSessions(res.result);\r\n                            } else {\r\n                                alert('Failed to get scheduled sessions');\r\n                            }\r\n                        })\r\n                } else {\r\n                    window.open('/', '_self');\r\n                }\r\n            })\r\n        return () => {\r\n            ac.abort();\r\n        }\r\n    }, [setUser]);\r\n\r\n    function handleAddSchedule() {\r\n        const formData = new FormData(addScheduleRef.current);\r\n        setTitle(\"\");\r\n        setDescription(\"\");\r\n        axios({\r\n            method: 'post',\r\n            url: '/tutor/addNewSchedule',\r\n            data: formData,\r\n            headers: {'Content-Type': 'multipart/form-data'}\r\n        })\r\n        .then(res => res.data)\r\n        .catch(err => console.log(err))\r\n        .then(res => {\r\n            if (res.success) {\r\n                alert('Success');\r\n            } else {\r\n                alert('Failed');\r\n            }\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    function handleNextWeek() {\r\n        const curr_day = dayMemo;\r\n        const adder = 7 - curr_day.getDay();\r\n        curr_day.setDate(curr_day.getDate() + adder);\r\n        setDayMemo(curr_day);\r\n        const temp = [];\r\n        const dates = [];\r\n        for (var i = 0; i < 7; i++) {\r\n            if (i === 0) {\r\n                dates.push(curr_day.getFullYear() + \"-\" + (curr_day.getMonth() + 1) + \"-\" + curr_day.getDate());\r\n                temp.push(curr_day.getDate());\r\n            } else {\r\n                const other_day = new Date(curr_day.getTime());\r\n                if (i < curr_day.getDay()) {\r\n                    other_day.setDate(curr_day.getDate() - (curr_day.getDay() - i));\r\n                } else {\r\n                    other_day.setDate(curr_day.getDate() + (i - curr_day.getDay()));\r\n                }\r\n                temp.push(other_day.getDate());\r\n                dates.push(other_day.getFullYear() + \"-\" + (other_day.getMonth() + 1) + \"-\" + other_day.getDate())\r\n            }\r\n        }\r\n        setDaynumbers(temp);\r\n        const formData = new FormData();\r\n        for (var i = 0; i < 7; i++) {\r\n            formData.append('dates[]', dates[i]);\r\n        }\r\n        axios({\r\n            method: 'post',\r\n            url: '/tutor/getSchedule',\r\n            data: formData,\r\n            headers: {'Content-Type': 'multipart/form-data'}\r\n        })\r\n        .then(res => res.data)\r\n        .catch(err => console.log(err))\r\n        .then(res => {\r\n            if (res.success) {\r\n                setSchedules(res.result);\r\n            } else {\r\n                alert('Failed');\r\n            }\r\n        })\r\n    }\r\n\r\n    function handlePrevWeek() {\r\n        const curr_day = dayMemo;\r\n        const adder = -1 - curr_day.getDay();\r\n        curr_day.setDate(curr_day.getDate() + adder);\r\n        setDayMemo(curr_day);\r\n        const temp = [];\r\n        const dates = [];\r\n        for (var i = 0; i < 7; i++) {\r\n            if (i === 6) {\r\n                dates.push(curr_day.getFullYear() + \"-\" + (curr_day.getMonth() + 1) + \"-\" + curr_day.getDate());\r\n                temp.push(curr_day.getDate());\r\n            } else {\r\n                const other_day = new Date(curr_day.getTime());\r\n                if (i < curr_day.getDay()) {\r\n                    other_day.setDate(curr_day.getDate() - (curr_day.getDay() - i));\r\n                } else {\r\n                    other_day.setDate(curr_day.getDate() + (i - curr_day.getDay()));\r\n                }\r\n                temp.push(other_day.getDate());\r\n                dates.push(other_day.getFullYear() + \"-\" + (other_day.getMonth() + 1) + \"-\" + other_day.getDate())\r\n            }\r\n        }\r\n        setDaynumbers(temp);\r\n        const formData = new FormData();\r\n        for (var i = 0; i < 7; i++) {\r\n            formData.append('dates[]', dates[i]);\r\n        }\r\n        axios({\r\n            method: 'post',\r\n            url: '/tutor/getSchedule',\r\n            data: formData,\r\n            headers: {'Content-Type': 'multipart/form-data'}\r\n        })\r\n        .then(res => res.data)\r\n        .catch(err => console.log(err))\r\n        .then(res => {\r\n            if (res.success) {\r\n                setSchedules(res.result);\r\n            } else {\r\n                alert('Failed');\r\n            }\r\n        })\r\n    }\r\n\r\n    return <div className=\"wrapper\">\r\n        <div className=\"sidebar\">\r\n            <ul>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#tutoringSchedule\";\r\n                }}><a href=\"#tutoringSchedule\">Tutoring schedule</a></li>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#addNewSchedule\";\r\n                }}><a href=\"#addNewSchedule\">Add new schedule</a></li>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#scheduleDetails\";\r\n                }}>Schedules details</li>\r\n            </ul>\r\n        </div>\r\n        <div className=\"content\" style={{overflowX: \"hidden\"}}>\r\n            <div className=\"box\">\r\n                <a name=\"tutoringSchedule\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Tutoring schedule</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    <Button style={{\r\n                        height: \"56px\",\r\n                        marginRight: \"1em\"\r\n                    }} variant=\"outlined\" color=\"secondary\" onClick={handlePrevWeek}>\r\n                        Prev\r\n                    </Button>\r\n                    {monthNames[dayMemo.getMonth()] + \" \" + dayMemo.getFullYear()}\r\n                    <Button style={{\r\n                        height: \"56px\",\r\n                        marginLeft: \"1em\"\r\n                    }} variant=\"outlined\" color=\"secondary\" onClick={handleNextWeek}>\r\n                        Next\r\n                    </Button><br /><br />\r\n                    <div className=\"calendar_container\">\r\n                        <div className=\"calendar_header\">\r\n                            <ul className=\"weekdays\">\r\n                                <li>SUN</li>\r\n                                <li>MON</li>\r\n                                <li>TUE</li>\r\n                                <li>WED</li>\r\n                                <li>THU</li>\r\n                                <li>FRI</li>\r\n                                <li>SAT</li>\r\n                            </ul>\r\n\r\n                            <ul className=\"daynumbers\">\r\n                                {daynumbers.map(daynumber => {\r\n                                    return <li>{daynumber}</li>\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"timeslots_container\">\r\n                            <ul className=\"timeslots\">\r\n                                <li>GMT+7</li>\r\n                                <li>01:00</li>\r\n                                <li>02:00</li>\r\n                                <li>03:00</li>\r\n                                <li>04:00</li>\r\n                                <li>05:00</li>\r\n                                <li>06:00</li>\r\n                                <li>07:00</li>\r\n                                <li>08:00</li>\r\n                                <li>09:00</li>\r\n                                <li>10:00</li>\r\n                                <li>11:00</li>\r\n                                <li>12:00</li>\r\n                                <li>13:00</li>\r\n                                <li>14:00</li>\r\n                                <li>15:00</li>\r\n                                <li>16:00</li>\r\n                                <li>17:00</li>\r\n                                <li>18:00</li>\r\n                                <li>19:00</li>\r\n                                <li>20:00</li>\r\n                                <li>21:00</li>\r\n                                <li>22:00</li>\r\n                                <li>23:00</li>\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div className=\"event_container\">\r\n                            {schedules.map(schedule => {\r\n                                const num_start_time = parseInt(schedule.start_time.split(\":\")[0]);\r\n                                const num_end_time = schedule.end_time.split(\":\")[0];\r\n                                const grid_row = (num_start_time * 4) + 1;\r\n                                const slotStyle = {\r\n                                    gridRow: String(grid_row),\r\n                                    gridColumn: 1 + new Date(schedule.date).getDay(),\r\n                                    height: String((num_end_time - num_start_time) * 60) + \"px\"\r\n                                }\r\n                                return <div className=\"slot\" style={slotStyle}>\r\n                                    <div className=\"event_status\">{schedule.title}<br /><br />{schedule.description}</div>\r\n                                </div>\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"box\">\r\n                <a name=\"addNewSchedule\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Add new schedule</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    <form ref={addScheduleRef}>\r\n                        <TextField \r\n                            id=\"outlined-basic\" \r\n                            label=\"Enter title\" \r\n                            name=\"title\"\r\n                            value={title}\r\n                            onChange={(e) => {\r\n                                setTitle(e.target.value);\r\n                            }}\r\n                            variant=\"outlined\"/><br />\r\n                        <TextField\r\n                            placeholder=\"Description\"\r\n                            multiline\r\n                            rows={4}\r\n                            rowsMax={4}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            value={description}\r\n                            onChange={(e) => {\r\n                                setDescription(e.target.value);\r\n                            }}\r\n                            style={{marginTop: \"1em\", width: \"50%\"}}\r\n                        />\r\n                        <div className={classes.container} noValidate>\r\n                            <TextField\r\n                                name=\"startTime\"\r\n                                id=\"startTime\"\r\n                                variant=\"outlined\"\r\n                                label=\"Start time\"\r\n                                type=\"datetime-local\"\r\n                                defaultValue={new Date().toString()}\r\n                                className={classes.textField}\r\n                                InputLabelProps={{\r\n                                shrink: true,\r\n                                className: classes.input\r\n                                }}\r\n                                InputProps={{ className: classes.input }}\r\n                            />\r\n                            <TextField\r\n                                style={{marginLeft: '1em'}}\r\n                                name=\"endTime\"\r\n                                id=\"endTime\"\r\n                                variant=\"outlined\"\r\n                                label=\"End time\"\r\n                                type=\"datetime-local\"\r\n                                defaultValue={new Date().toString()}\r\n                                className={classes.textField}\r\n                                InputLabelProps={{\r\n                                shrink: true,\r\n                                className: classes.input\r\n                                }}\r\n                                InputProps={{ className: classes.input }}\r\n                            />\r\n                        </div><br />\r\n                    </form>\r\n                    <Button style={{\r\n                        height: \"56px\",\r\n                    }} onClick={handleAddSchedule} variant=\"outlined\" color=\"secondary\">\r\n                        Add\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className=\"box\">\r\n                <a name=\"scheduleDetails\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Schedules details</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    {sessions.length === 0 && \"Your scheduled sessions will appear here.\"}\r\n                    {sessions.map(session => {\r\n                        return <div className=\"box\" style={{width: \"40%\"}}>\r\n                            <div className=\"box_top\">\r\n                                <h2>{session.title}</h2>\r\n                            </div>\r\n                            <div className=\"box_bottom\">\r\n                                <u style={{cursor: \"pointer\"}} onClick={() => {\r\n                                    window.open('/room/' + session._id, '_self');\r\n                                }}>Click this link to open the meeting</u>\r\n                            </div>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\Navbar.js",["99"],"import SearchIcon from '@material-ui/icons/Search';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport {useState} from 'react';\r\n\r\nfunction iconStyles() {\r\n    return {\r\n        searchIconColor: {\r\n            color: 'grey',\r\n        }\r\n    }\r\n}\r\n\r\nexport default function Navbar(props) {\r\n    const {user} = props;\r\n    const classes = makeStyles(iconStyles)();\r\n    const [searchVal, setSearchVal] = useState(\"\");\r\n\r\n    function goToHome() {\r\n        window.open('/home', '_self');\r\n    }\r\n\r\n    function goToApplyTutor() {\r\n        window.open('/apply', '_self');\r\n    }\r\n\r\n    function goToTutorDashboard() {\r\n        window.open('/tutorDashboard', '_self');\r\n    }\r\n\r\n    function goToAdminDashboard() {\r\n        window.open('/admin', '_self');\r\n    }\r\n\r\n    function handleSearchSubmit(event) {\r\n        event.preventDefault();\r\n        const temp = searchVal;\r\n        setSearchVal(\"\");\r\n        window.open('/search/' + temp, '_self');\r\n    }\r\n\r\n    return <div className=\"navbar\">\r\n        <div className=\"navbar_left\">\r\n            <h2 className=\"navbar_title\">Tutorgenic</h2>\r\n            <div className=\"navbar_input\">\r\n                <SearchIcon className={classes.searchIconColor}/>\r\n                <form onSubmit={handleSearchSubmit}>\r\n                    <input \r\n                        id=\"input\"\r\n                        style={{outline: \"none\"}}\r\n                        placeholder=\"Search subjects or tutors\" \r\n                        autoComplete=\"off\" \r\n                        type=\"text\" \r\n                        value={searchVal}\r\n                        onChange={(e) => {\r\n                            setSearchVal(e.target.value);\r\n                        }}/>\r\n                    <input type=\"submit\" style={{display: \"none\"}} />\r\n                </form>\r\n            </div>\r\n        </div>\r\n        <div className=\"navbar_right\">\r\n            <div className=\"navbar_option\" onClick={goToHome}>\r\n                <p>Home</p>\r\n            </div>\r\n            {(user && user.is_tutor) ? <div className=\"navbar_option\" onClick={goToTutorDashboard}>\r\n                <p>Tutor dashboard</p>\r\n            </div> : <div className=\"navbar_option\" onClick={goToApplyTutor}>\r\n                <p>Become a tutor</p>\r\n            </div>}\r\n            {(user && user.is_admin) && <div className=\"navbar_option\" onClick={goToAdminDashboard}>\r\n                <p>Admin</p>\r\n            </div>}\r\n            <div className=\"navbar_option\" onClick={() => {\r\n                window.open('/auth/logout', '_self');\r\n            }}>\r\n                <p>Logout</p>\r\n            </div>\r\n            <div className=\"navbar_info navbar_option\">\r\n                {user && <img alt=\"user profile\" src = {user.image_url}/>}\r\n                {user && <h4>{user.first_name + \" \" + user.last_name.slice(0, 1) + \".\"}</h4>}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\Search.js",["100","101"],"import {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default function Search(props) {\r\n    const {setDisplayNavbar, setUser, searchValue} = props;\r\n    const [searchVal, setSearchVal] = useState(\"\");\r\n    const [results, setResults] = useState([]);\r\n    setDisplayNavbar(true);\r\n    useEffect(() => {\r\n        const ac = new AbortController();\r\n\r\n        axios.get('/auth/isLoggedIn')\r\n            .then(res => res.data)\r\n            .catch(err => console.log(err))\r\n            .then(res => {\r\n                if (res.isLoggedIn) {\r\n                    const user = res.user;\r\n                    setUser(user);\r\n                    if (searchValue) {\r\n                        setSearchVal(searchValue);\r\n                        const formData = new FormData();\r\n                        formData.set('search_value', searchValue);\r\n                        axios({\r\n                            method: 'post',\r\n                            url: '/tutor/search',\r\n                            data: formData,\r\n                            headers: {'Content-Type': 'multipart/form-data'}\r\n                        })\r\n                        .then(res => res.data)\r\n                        .catch(err => console.log(err))\r\n                        .then(res => {\r\n                            if (res.success) {\r\n                                setResults(res.result);\r\n                            } else {\r\n                                alert('Failed to get result');\r\n                            }\r\n                        })\r\n                    }\r\n                } else {\r\n                    window.open('/', '_self');\r\n                }\r\n            })\r\n\r\n        return () => {\r\n            ac.abort();\r\n        }\r\n    }, [setUser]);\r\n\r\n    function handleSearchSubmit() {\r\n        const formData = new FormData();\r\n        formData.set('search_value', searchVal);\r\n        axios({\r\n            method: 'post',\r\n            url: '/tutor/search',\r\n            data: formData,\r\n            headers: {'Content-Type': 'multipart/form-data'}\r\n        })\r\n        .then(res => res.data)\r\n        .catch(err => console.log(err))\r\n        .then(res => {\r\n            if (res.success) {\r\n                setResults(res.result);\r\n            } else {\r\n                alert('Failed to get result');\r\n            }\r\n        })\r\n    }\r\n\r\n    return <div className=\"wrapper\">\r\n        <div className=\"content\" style={{flex: \"1\"}}>\r\n            <div className=\"box\" style={{flex: \"0.2\"}}>\r\n                <div className=\"box_top\" style={{textAlign: \"center\"}}>\r\n                    <h2 style={{margin: \"auto\"}}>Search</h2>\r\n                </div>\r\n                <div className=\"box_bottom\" style={{textAlign: \"center\"}}>\r\n                    <TextField \r\n                        id=\"outlined-basic\" \r\n                        label=\"Search subjects or tutors\" \r\n                        style={{width: \"50%\", margin: \"auto\"}}\r\n                        variant=\"outlined\"\r\n                        value={searchVal}\r\n                        onChange={(event) => {\r\n                            setSearchVal(event.target.value);\r\n                        }}/>\r\n                    <Button style={{height: \"56px\", marginLeft: \"1em\"}} variant=\"outlined\" color=\"secondary\" onClick={() => {\r\n                        handleSearchSubmit();\r\n                    }}>\r\n                        Search\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div style={{flex: \"0.75\", width: '95%', overflow: \"auto\", paddingTop: \"10px\"}}>\r\n                {results.map(result => {\r\n                    return <div className=\"box\" style={{margin: \"auto\", width: \"70%\"}}>\r\n                        <div className=\"box_top\">\r\n                            <h3>{result.first_name + \" \" + result.last_name.slice(0, 1) + \".\"}</h3>\r\n                        </div>\r\n                        <div className=\"box_bottom\" style={{display: 'flex'}}>\r\n                            <div style={{flex: '0.1'}}>\r\n                                <img\r\n                                    style={{width: \"90px\", height: \"90px\", borderRadius: \"50%\"}} \r\n                                    src={result.image_url}\r\n                                />\r\n                            </div>\r\n                            <div style={{flex: '0.9', paddingLeft: \"1em\"}}>\r\n                                {result.educations.map(education => {\r\n                                    return <div>\r\n                                        {education.degree + \", \" + education.school}<br />\r\n                                    </div>\r\n                                })}\r\n                                <br />\r\n                                <b>{result.headline}</b> <br />\r\n                                {result.description}\r\n                                <br /><br />\r\n                                <Button variant=\"outlined\" color=\"secondary\" onClick={() => {\r\n                                    window.open('/tutor/' + result._id, '_self');\r\n                                }}>\r\n                                    view\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div> \r\n                })}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\TutorPage.js",["102","103","104","105","106","107","108","109","110","111","112"],"import axios from 'axios';\r\nimport {useEffect, useRef, useState} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        width: 200,\r\n        marginTop: \"1em\",\r\n        color: \"white\"\r\n    }\r\n}));\r\n\r\nexport default function TutorPage(props) {\r\n    const classes = useStyles();\r\n    const addScheduleRef = useRef();\r\n    const {setDisplayNavbar, setUser, tutorId} = props;\r\n    const [schedules, setSchedules] = useState([]);\r\n    const [daynumbers, setDaynumbers] = useState([]);\r\n    const [dayMemo, setDayMemo] = useState(new Date());\r\n    const [registeredSession, setRegisteredSession] = useState();\r\n\r\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n    ];\r\n\r\n    setDisplayNavbar(true);\r\n    useEffect(() => {\r\n        const ac = new AbortController();\r\n        axios.get('/auth/isLoggedIn')\r\n            .then(res => res.data)\r\n            .catch(err => console.log(err))\r\n            .then(res => {\r\n                if (res.isLoggedIn) {\r\n                    const user = res.user;\r\n                    setUser(user);\r\n                    const dates = [];\r\n                    const temp = [];\r\n                    const curr_day = new Date();\r\n                    for (var i = 0; i < 7; i++) {\r\n                        if (i === curr_day.getDay()) {\r\n                            dates.push(curr_day.getFullYear() + \"-\" + (curr_day.getMonth() + 1) + \"-\" + curr_day.getDate());\r\n                            temp.push(curr_day.getDate());\r\n                        } else {\r\n                            const other_day = new Date(curr_day.getTime());\r\n                            if (i < curr_day.getDay()) {\r\n                                other_day.setDate(curr_day.getDate() - (curr_day.getDay() - i));\r\n                            } else {\r\n                                other_day.setDate(curr_day.getDate() + (i - curr_day.getDay()));\r\n                            }\r\n                            temp.push(other_day.getDate());\r\n                            dates.push(other_day.getFullYear() + \"-\" + (other_day.getMonth() + 1) + \"-\" + other_day.getDate())\r\n                        }\r\n                    }\r\n                    setDaynumbers(temp);\r\n                    const formData = new FormData();\r\n                    for (var i = 0; i < 7; i++) {\r\n                        formData.append('dates[]', dates[i]);\r\n                    }\r\n                    formData.set('tutor_id', tutorId);\r\n                    axios({\r\n                        method: 'post',\r\n                        url: '/tutor/getSchedule',\r\n                        data: formData,\r\n                        headers: {'Content-Type': 'multipart/form-data'}\r\n                    })\r\n                    .then(res => res.data)\r\n                    .catch(err => console.log(err))\r\n                    .then(res => {\r\n                        if (res.success) {\r\n                            setSchedules(res.result);\r\n                        } else {\r\n                            alert('Failed');\r\n                        }\r\n                    })\r\n                } else {\r\n                    window.open('/', '_self');\r\n                }\r\n            })\r\n        return () => {\r\n            ac.abort();\r\n        }\r\n    }, [setUser]);\r\n\r\n    function handleNextWeek() {\r\n        const curr_day = dayMemo;\r\n        const adder = 7 - curr_day.getDay();\r\n        curr_day.setDate(curr_day.getDate() + adder);\r\n        setDayMemo(curr_day);\r\n        const temp = [];\r\n        const dates = [];\r\n        for (var i = 0; i < 7; i++) {\r\n            if (i === 0) {\r\n                dates.push(curr_day.getFullYear() + \"-\" + (curr_day.getMonth() + 1) + \"-\" + curr_day.getDate());\r\n                temp.push(curr_day.getDate());\r\n            } else {\r\n                const other_day = new Date(curr_day.getTime());\r\n                if (i < curr_day.getDay()) {\r\n                    other_day.setDate(curr_day.getDate() - (curr_day.getDay() - i));\r\n                } else {\r\n                    other_day.setDate(curr_day.getDate() + (i - curr_day.getDay()));\r\n                }\r\n                temp.push(other_day.getDate());\r\n                dates.push(other_day.getFullYear() + \"-\" + (other_day.getMonth() + 1) + \"-\" + other_day.getDate())\r\n            }\r\n        }\r\n        setDaynumbers(temp);\r\n        const formData = new FormData();\r\n        for (var i = 0; i < 7; i++) {\r\n            formData.append('dates[]', dates[i]);\r\n        }\r\n        formData.set('tutor_id', tutorId);\r\n        axios({\r\n            method: 'post',\r\n            url: '/tutor/getSchedule',\r\n            data: formData,\r\n            headers: {'Content-Type': 'multipart/form-data'}\r\n        })\r\n        .then(res => res.data)\r\n        .catch(err => console.log(err))\r\n        .then(res => {\r\n            if (res.success) {\r\n                setSchedules(res.result);\r\n            } else {\r\n                alert('Failed');\r\n            }\r\n        })\r\n    }\r\n\r\n    function handlePrevWeek() {\r\n        const curr_day = dayMemo;\r\n        const adder = -1 - curr_day.getDay();\r\n        curr_day.setDate(curr_day.getDate() + adder);\r\n        setDayMemo(curr_day);\r\n        const temp = [];\r\n        const dates = [];\r\n        for (var i = 0; i < 7; i++) {\r\n            if (i === 6) {\r\n                dates.push(curr_day.getFullYear() + \"-\" + (curr_day.getMonth() + 1) + \"-\" + curr_day.getDate());\r\n                temp.push(curr_day.getDate());\r\n            } else {\r\n                const other_day = new Date(curr_day.getTime());\r\n                if (i < curr_day.getDay()) {\r\n                    other_day.setDate(curr_day.getDate() - (curr_day.getDay() - i));\r\n                } else {\r\n                    other_day.setDate(curr_day.getDate() + (i - curr_day.getDay()));\r\n                }\r\n                temp.push(other_day.getDate());\r\n                dates.push(other_day.getFullYear() + \"-\" + (other_day.getMonth() + 1) + \"-\" + other_day.getDate())\r\n            }\r\n        }\r\n        setDaynumbers(temp);\r\n        const formData = new FormData();\r\n        for (var i = 0; i < 7; i++) {\r\n            formData.append('dates[]', dates[i]);\r\n        }\r\n        axios({\r\n            method: 'post',\r\n            url: '/tutor/getSchedule',\r\n            data: formData,\r\n            headers: {'Content-Type': 'multipart/form-data'}\r\n        })\r\n        .then(res => res.data)\r\n        .catch(err => console.log(err))\r\n        .then(res => {\r\n            if (res.success) {\r\n                setSchedules(res.result);\r\n            } else {\r\n                alert('Failed');\r\n            }\r\n        })\r\n    }\r\n\r\n    function handleRegister(courseId) {\r\n        const formData = new FormData();\r\n        formData.set('course_id', courseId);\r\n        setRegisteredSession();\r\n        axios({\r\n            method: 'post',\r\n            url: '/tutor/register',\r\n            data: formData,\r\n            headers: {'Content-Type': 'multipart/form-data'}\r\n        })\r\n        .then(res => res.data)\r\n        .catch(err => console.log(err))\r\n        .then(res => {\r\n            if (res.success) {\r\n                alert('Registered');\r\n            } else {\r\n                alert('Failed to register');\r\n            }\r\n        })\r\n    }\r\n\r\n    return <div className=\"wrapper\">\r\n        <div className=\"sidebar\">\r\n            <ul>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#tutoringSchedule\";\r\n                }}><a href=\"#tutoringSchedule\">Tutoring schedule</a></li>\r\n                <li onClick={() => {\r\n                    window.location.href = \"#registerForSession\";\r\n                }}>Register for a session</li>\r\n            </ul>\r\n        </div>\r\n        <div className=\"content\" style={{overflowX: \"hidden\"}}>\r\n            <div className=\"box\">\r\n                <a name=\"tutoringSchedule\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Tutoring schedule</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    <Button style={{\r\n                        height: \"56px\",\r\n                        marginRight: \"1em\"\r\n                    }} variant=\"outlined\" color=\"secondary\" onClick={handlePrevWeek}>\r\n                        Prev\r\n                    </Button>\r\n                    {monthNames[dayMemo.getMonth()] + \" \" + dayMemo.getFullYear()}\r\n                    <Button style={{\r\n                        height: \"56px\",\r\n                        marginLeft: \"1em\"\r\n                    }} variant=\"outlined\" color=\"secondary\" onClick={handleNextWeek}>\r\n                        Next\r\n                    </Button><br /><br />\r\n                    <div className=\"calendar_container\">\r\n                        <div className=\"calendar_header\">\r\n                            <ul className=\"weekdays\">\r\n                                <li>SUN</li>\r\n                                <li>MON</li>\r\n                                <li>TUE</li>\r\n                                <li>WED</li>\r\n                                <li>THU</li>\r\n                                <li>FRI</li>\r\n                                <li>SAT</li>\r\n                            </ul>\r\n\r\n                            <ul className=\"daynumbers\">\r\n                                {daynumbers.map(daynumber => {\r\n                                    return <li>{daynumber}</li>\r\n                                })}\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"timeslots_container\">\r\n                            <ul className=\"timeslots\">\r\n                                <li>GMT+7</li>\r\n                                <li>01:00</li>\r\n                                <li>02:00</li>\r\n                                <li>03:00</li>\r\n                                <li>04:00</li>\r\n                                <li>05:00</li>\r\n                                <li>06:00</li>\r\n                                <li>07:00</li>\r\n                                <li>08:00</li>\r\n                                <li>09:00</li>\r\n                                <li>10:00</li>\r\n                                <li>11:00</li>\r\n                                <li>12:00</li>\r\n                                <li>13:00</li>\r\n                                <li>14:00</li>\r\n                                <li>15:00</li>\r\n                                <li>16:00</li>\r\n                                <li>17:00</li>\r\n                                <li>18:00</li>\r\n                                <li>19:00</li>\r\n                                <li>20:00</li>\r\n                                <li>21:00</li>\r\n                                <li>22:00</li>\r\n                                <li>23:00</li>\r\n                            </ul>\r\n                        </div>\r\n\r\n                        <div className=\"event_container\">\r\n                            {schedules.map(schedule => {\r\n                                const num_start_time = parseInt(schedule.start_time.split(\":\")[0]);\r\n                                const num_end_time = schedule.end_time.split(\":\")[0];\r\n                                const grid_row = (num_start_time * 4) + 1;\r\n                                const slotStyle = {\r\n                                    gridRow: String(grid_row),\r\n                                    gridColumn: 1 + new Date(schedule.date).getDay(),\r\n                                    height: String((num_end_time - num_start_time) * 60) + \"px\",\r\n                                    cursor: \"pointer\"\r\n                                }\r\n                                return <div className=\"slot\" style={slotStyle} onClick={() => {\r\n                                    setRegisteredSession({\r\n                                        _id: schedule._id,\r\n                                        title: schedule.title\r\n                                    })\r\n                                    window.location.href = \"#registerForSession\";\r\n                                }}>\r\n                                    <div className=\"event_status\">{schedule.title}<br /><br />{schedule.description}</div>\r\n                                </div>\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"box\">\r\n                <a name=\"registerForSession\"></a>\r\n                <div className=\"box_top\">\r\n                    <h2>Register for a session</h2>\r\n                </div>\r\n                <div className=\"box_bottom\">\r\n                    {registeredSession ? <div>\r\n                        You have selected a new session: {registeredSession.title} <br /><br />\r\n                        <Button style={{\r\n                            height: \"56px\",\r\n                            marginLeft: \"1em\"\r\n                        }} variant=\"outlined\" color=\"secondary\" onClick={() => {\r\n                            handleRegister(registeredSession._id);\r\n                        }}>\r\n                            Register\r\n                        </Button>\r\n                    </div> : \"Please select a new session.\"}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","C:\\Users\\noogler\\Documents\\tutorgenic\\dev\\client\\src\\components\\Room.js",["113","114"],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":48,"column":17,"nodeType":"121","endLine":48,"endColumn":44},{"ruleId":"122","severity":1,"message":"123","line":48,"column":17,"nodeType":"121","endLine":48,"endColumn":44},{"ruleId":"124","severity":1,"message":"125","line":5,"column":8,"nodeType":"126","messageId":"127","endLine":5,"endColumn":23},{"ruleId":"124","severity":1,"message":"128","line":7,"column":8,"nodeType":"126","messageId":"127","endLine":7,"endColumn":19},{"ruleId":"124","severity":1,"message":"129","line":11,"column":8,"nodeType":"126","messageId":"127","endLine":11,"endColumn":22},{"ruleId":"124","severity":1,"message":"130","line":41,"column":12,"nodeType":"126","messageId":"127","endLine":41,"endColumn":21},{"ruleId":"124","severity":1,"message":"131","line":85,"column":12,"nodeType":"126","messageId":"127","endLine":85,"endColumn":28},{"ruleId":"124","severity":1,"message":"132","line":87,"column":14,"nodeType":"126","messageId":"127","endLine":87,"endColumn":21},{"ruleId":"124","severity":1,"message":"133","line":92,"column":20,"nodeType":"126","messageId":"127","endLine":92,"endColumn":26},{"ruleId":"124","severity":1,"message":"134","line":103,"column":14,"nodeType":"126","messageId":"127","endLine":103,"endColumn":30},{"ruleId":"119","severity":1,"message":"120","line":268,"column":17,"nodeType":"121","endLine":268,"endColumn":47},{"ruleId":"122","severity":1,"message":"123","line":268,"column":17,"nodeType":"121","endLine":268,"endColumn":47},{"ruleId":"119","severity":1,"message":"120","line":347,"column":17,"nodeType":"121","endLine":347,"endColumn":36},{"ruleId":"122","severity":1,"message":"123","line":347,"column":17,"nodeType":"121","endLine":347,"endColumn":36},{"ruleId":"119","severity":1,"message":"120","line":368,"column":17,"nodeType":"121","endLine":368,"endColumn":37},{"ruleId":"122","severity":1,"message":"123","line":368,"column":17,"nodeType":"121","endLine":368,"endColumn":37},{"ruleId":"119","severity":1,"message":"120","line":564,"column":17,"nodeType":"121","endLine":564,"endColumn":38},{"ruleId":"122","severity":1,"message":"123","line":564,"column":17,"nodeType":"121","endLine":564,"endColumn":38},{"ruleId":"119","severity":1,"message":"120","line":760,"column":17,"nodeType":"121","endLine":760,"endColumn":43},{"ruleId":"122","severity":1,"message":"123","line":760,"column":17,"nodeType":"121","endLine":760,"endColumn":43},{"ruleId":"119","severity":1,"message":"120","line":783,"column":17,"nodeType":"121","endLine":783,"endColumn":45},{"ruleId":"122","severity":1,"message":"123","line":783,"column":17,"nodeType":"121","endLine":783,"endColumn":45},{"ruleId":"119","severity":1,"message":"120","line":291,"column":17,"nodeType":"121","endLine":291,"endColumn":46},{"ruleId":"122","severity":1,"message":"123","line":291,"column":17,"nodeType":"121","endLine":291,"endColumn":46},{"ruleId":"119","severity":1,"message":"120","line":321,"column":17,"nodeType":"121","endLine":321,"endColumn":36},{"ruleId":"122","severity":1,"message":"123","line":321,"column":17,"nodeType":"121","endLine":321,"endColumn":36},{"ruleId":"119","severity":1,"message":"120","line":343,"column":17,"nodeType":"121","endLine":343,"endColumn":38},{"ruleId":"122","severity":1,"message":"123","line":343,"column":17,"nodeType":"121","endLine":343,"endColumn":38},{"ruleId":"119","severity":1,"message":"120","line":365,"column":17,"nodeType":"121","endLine":365,"endColumn":39},{"ruleId":"122","severity":1,"message":"123","line":365,"column":17,"nodeType":"121","endLine":365,"endColumn":39},{"ruleId":"135","severity":1,"message":"136","line":64,"column":30,"nodeType":"126","messageId":"137","endLine":64,"endColumn":31},{"ruleId":"135","severity":1,"message":"136","line":147,"column":18,"nodeType":"126","messageId":"137","endLine":147,"endColumn":19},{"ruleId":"135","severity":1,"message":"136","line":191,"column":18,"nodeType":"126","messageId":"137","endLine":191,"endColumn":19},{"ruleId":"119","severity":1,"message":"120","line":227,"column":17,"nodeType":"121","endLine":227,"endColumn":44},{"ruleId":"122","severity":1,"message":"123","line":227,"column":17,"nodeType":"121","endLine":227,"endColumn":44},{"ruleId":"119","severity":1,"message":"120","line":311,"column":17,"nodeType":"121","endLine":311,"endColumn":42},{"ruleId":"122","severity":1,"message":"123","line":311,"column":17,"nodeType":"121","endLine":311,"endColumn":42},{"ruleId":"119","severity":1,"message":"120","line":379,"column":17,"nodeType":"121","endLine":379,"endColumn":43},{"ruleId":"122","severity":1,"message":"123","line":379,"column":17,"nodeType":"121","endLine":379,"endColumn":43},{"ruleId":"124","severity":1,"message":"138","line":3,"column":8,"nodeType":"126","messageId":"127","endLine":3,"endColumn":13},{"ruleId":"139","severity":1,"message":"140","line":49,"column":8,"nodeType":"141","endLine":49,"endColumn":17,"suggestions":"142"},{"ruleId":"143","severity":1,"message":"144","line":102,"column":33,"nodeType":"121","endLine":105,"endColumn":35},{"ruleId":"124","severity":1,"message":"145","line":3,"column":8,"nodeType":"126","messageId":"127","endLine":3,"endColumn":17},{"ruleId":"124","severity":1,"message":"146","line":20,"column":11,"nodeType":"126","messageId":"127","endLine":20,"endColumn":18},{"ruleId":"124","severity":1,"message":"147","line":21,"column":11,"nodeType":"126","messageId":"127","endLine":21,"endColumn":25},{"ruleId":"135","severity":1,"message":"136","line":62,"column":30,"nodeType":"126","messageId":"137","endLine":62,"endColumn":31},{"ruleId":"139","severity":1,"message":"148","line":88,"column":8,"nodeType":"141","endLine":88,"endColumn":17,"suggestions":"149"},{"ruleId":"135","severity":1,"message":"136","line":114,"column":18,"nodeType":"126","messageId":"137","endLine":114,"endColumn":19},{"ruleId":"135","severity":1,"message":"136","line":159,"column":18,"nodeType":"126","messageId":"137","endLine":159,"endColumn":19},{"ruleId":"119","severity":1,"message":"120","line":213,"column":17,"nodeType":"121","endLine":213,"endColumn":44},{"ruleId":"122","severity":1,"message":"123","line":213,"column":17,"nodeType":"121","endLine":213,"endColumn":44},{"ruleId":"119","severity":1,"message":"120","line":304,"column":17,"nodeType":"121","endLine":304,"endColumn":46},{"ruleId":"122","severity":1,"message":"123","line":304,"column":17,"nodeType":"121","endLine":304,"endColumn":46},{"ruleId":"150","severity":1,"message":"151","line":55,"column":53,"nodeType":"152","messageId":"153","endLine":55,"endColumn":55},{"ruleId":"139","severity":1,"message":"154","line":172,"column":8,"nodeType":"141","endLine":172,"endColumn":17,"suggestions":"155"},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-unused-vars","'ReactAvatarEdit' is defined but never used.","Identifier","unusedVar","'ReactAvatar' is defined but never used.","'FormHelperText' is defined but never used.","'localUser' is assigned a value but never used.","'uploadingNewFile' is assigned a value but never used.","'onClose' is defined but never used.","'onCrop' is defined but never used.","'onBeforeFileLoad' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchValue'. Either include it or remove the dependency array.","ArrayExpression",["158"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'TextField' is defined but never used.","'classes' is assigned a value but never used.","'addScheduleRef' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'tutorId'. Either include it or remove the dependency array.",["159"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'courseId'. Either include it or remove the dependency array.",["160"],"no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [searchValue, setUser]",{"range":"167","text":"168"},"Update the dependencies array to be: [setUser, tutorId]",{"range":"169","text":"170"},"Update the dependencies array to be: [courseId, setUser]",{"range":"171","text":"172"},[1854,1863],"[searchValue, setUser]",[3580,3589],"[setUser, tutorId]",[9236,9245],"[courseId, setUser]"]